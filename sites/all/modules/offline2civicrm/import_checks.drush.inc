<?php
/**
 * @file check_import.drush.inc
 *
 * Import checks processed offline into CiviCRM from a CSV
 *
 * @author Peter Gehres <pgehres@wikimedia.org>
 */

/**
 * Implementation of hook_drush_command()
 */
function import_checks_drush_command() {
  $items = array();

  $items['import-checks'] = array(
    'description' => 
      'Import checks processed offline into CiviCRM from a CSV',
    'examples' => array( 'drush import-checks filename.csv' ),
//    'aliases' => array( 'ic' ),
  	'required-arguments' => true,
	'arguments' => array(
		'file' => 'Name of CSV file to process'
	)
  );

  return $items;
}

/**
 * Implementation of hook_drush_help()
 */
function import_checks_drush_help( $section ) {
  switch ( $section ) {
    case 'drush:import-checks':
      return dt( "Import checks processed offline into CiviCRM from a CSV" );
  }
}

/**
 * Loads lines from a file and imports into CiviCRM
 */
function drush_import_checks() {
	require_once 'offline2civicrm.common.inc';

	global $dbs;

	try{
		$dbs = wmf_civicrm_get_dbs();

		$args = drush_get_arguments();
		$filename = $args[1];

		if( ( $file = fopen( $filename, 'r' )) === FALSE ){
			watchdog('offline2civicrm', 'Import checks: Could not open file for reading: ' . $filename, array(), WATCHDOG_ERROR);
			return;
		}

		$headers = _load_headers( fgetcsv( $file, 0, ',', '"', '\\') );

		while( ( $row = fgetcsv( $file, 0, ',', '"', '\\')) !== FALSE) {
			// The following is fairly specific to the format received for the 2011 fundraiser
			// in csv's generated by Merkle. This may be to be tweaked if a new format is used
			$msg = array(
				"optout" => "1",
				"anonymous" => "0",
				"utm_source" =>  _get_value( "Payment Instrument", $row, $headers ),
				"utm_medium" => str_replace(' ', '', _get_value( "Appeal", $row, $headers ) ),
				"letter_code" => _get_value( "Letter Code", $row, $headers ),
				"contact_source" => "check",
				"language" => "en",
				"street_address" => _get_value( "Street Address", $row, $headers ),
				"supplemental_address_1" => _get_value( "Additional Address 1", $row, $headers ),
				"city" => _get_value( "City", $row, $headers ),
				"state_province" => _get_value( "State", $row, $headers ),
				"postal_code" => _get_value( "Postal Code", $row, $headers ),
				"gateway" => "merkle",
				"payment_method" => _get_value( "Payment Instrument", $row, $headers ),
				"payment_submethod" => "",
				"check_number" => _get_value( "Check Number", $row, $headers ),
				"currency" => substr( _get_value( "Source", $row, $headers ), 0, strpos( _get_value( "Source", $row, $headers ), ' ' ) + 1 ),
				"original_currency" => substr( _get_value( "Source", $row, $headers ), 0, strpos( _get_value( "Source", $row, $headers ), ' ' ) + 1 ),
				"original_gross" => _get_value( "Total Amount", $row, $headers ),
				"fee" => "0",
				"gross" => _get_value( "Total Amount", $row, $headers ),
				"net" => _get_value( "Total Amount", $row, $headers ),
				"date" => strtotime( _get_value( "Received Date", $row, $headers ) )
			);

			if( _get_value( 'Organization Name', $row, $headers, FALSE ) === FALSE ){
				$msg['contact_type'] = "Individual";
				$msg["first_name"] = _get_value( "First Name", $row, $headers );
				$msg["middle_name"] = _get_value( "Middle Name", $row, $headers );
				$msg["last_name"] = _get_value( "Last Name", $row, $headers );
			} else {
				$msg['contact_type'] = "Organization";
				$msg['organization_name'] = _get_value( "Organization Name", $row, $headers );
			}

			// check for additional address information
			if( _get_value( 'Additional Address 2', $row, $headers ) != ''){
				$msg['supplemental_address_1'] .= ' ' . _get_value( 'Additional Address 2', $row, $headers );
			}

			// An email address is one of the crucial fields we need
			if( _get_value( 'Email', $row, $headers ) == ''){
				// set to the default, no TY will be sent
				$msg['email'] = "nobody@wikimedia.org";
			} else {
				$msg['email'] = _get_value( 'Email', $row, $headers );
			}

			// CiviCRM gets all weird when there is no country set
			// Making the assumption that none = US
			if( _get_value( 'Country', $row, $headers ) == ''){
				// set to the default, no TY will be sent
				$msg['country'] = "US";
			} else {
				$msg['country'] = _get_value( 'Country', $row, $headers );
			}

			// Generating a transaction id so that we don't import the same rows multiple times
			$name_salt = $msg['contact_type'] == "Individual" ? $msg["first_name"] . $msg["last_name"] : $msg["organization_name"];
			$msg['gateway_txn_id'] = md5( $msg['check_number'] . $name_salt );

			// check to see if we have already processed this check
			if ( $existing = _check_existing( "MERKLE {$msg['gateway_txn_id']}" ) ){
				// if so, move on
				watchdog('offline2civicrm', 'Contribution matches existing contribution (id: ' . $existing['id'] .
					') Skipping', array(), WATCHDOG_INFO);
				continue;
			}

			try {
				$contribution = wmf_civicrm_contribution_message_import( $msg );
			}
			catch (WmfException $ex) {
				watchdog('offline2civicrm', 'Import checks: error during import ' + $ex->getMessage(), NULL, WATCHDOG_ERROR);
				if ($ex->isFatal()) {
					watchdog('offline2civicrm', 'Import checks: fatal error, aborting process', NULL, WATCHDOG_ERROR);
					return;
				}
			}

			watchdog('offline2civicrm', 'Import checks: Contribution imported successfully (%id): %msg', array('%id' => $contribution['id'], '%msg' => print_r( $msg, true )), WATCHDOG_INFO);
		}
	} catch ( Exception $e ){
		watchdog('offline2civicrm', 'Import checks: Exception thrown during check processing: ' . print_r( $e, true ), array(), WATCHDOG_ERROR);
	}
}

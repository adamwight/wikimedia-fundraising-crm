<?php

require_once 'offline2civicrm.common.inc';

/**
 * Implementation of hook_menu().
 */
function offline2civicrm_menu() {
  $items = array();
  
  $items['admin/config/offline2civicrm'] = array(
    'title' => 'Offline to CiviCRM',
    'description' => t('Configure offline import interface.'),
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_settings'),
  );

  $items['admin/config/offline2civicrm/configure'] = array(
    'title' => 'Configure',
    'access arguments' => array('administer offline2civicrm'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function offline2civicrm_perm() {
  return array('administer offline2civicrm');
}

/**
 * Callback for menu path "admin/config/offline2civicrm".
 */
function offline2civicrm_settings() {
  $form = array();
  
  return system_settings_form($form);
}

/**
 * This hook gets called "magically" after a contribution is added via the queue consumer.
 * If the contribution was a check, it adds the check to a "Review" group for manual review
 * by the Development/Major Gifts team.
 *
 * @param $contribution_info
 */
function offline2civicrm_queue2civicrm_import( $contribution_info ){

  static $group;
  $group_name = "Imported checks to review";

  // check for the required keys
  if( !array_key_exists( "msg", $contribution_info )
    || !array_key_exists( "gateway", $contribution_info['msg'] )
    || !array_key_exists( "contact_id", $contribution_info )
  ){
    return;
  }

  if( strtoupper( $contribution_info['msg']['gateway'] ) == "CHECK"  ){
    // add the transactions to the check import group for review
    watchdog( 'offline2civicrm', "Adding CHECK to group $group_name" );

    // if the group has not already been retrieved, go and get it
    if( !isset( $group ) ){
      $group_tmp = civicrm_api( "Group", "Get", array(
        'version' => '3',
        'title' => $group_name
      ));

      // TODO: use the wmf_common API checker when it exists
      if( is_array( $group_tmp ) && array_key_exists( "is_error", $group_tmp ) && $group_tmp['is_error'] == "0" ){
        if( array_key_exists( "count", $group_tmp ) && $group_tmp['count'] > 0 ){
          $group = $group_tmp['values'][ $group_tmp['id'] ];
          watchdog( 'offline2civicrm', "Found group \"$group_name\" with id=" . $group_tmp['id'] );
        } else {
          // we need to create the group
          $group_tmp = civicrm_api( "Group", "Create", array(
            'version' => '3',
            'title' => $group_name
          ));

          if( is_array( $group_tmp ) && array_key_exists( "is_error", $group_tmp ) && $group_tmp['is_error'] == "0" ){
            $group = $group_tmp['values'][ $group_tmp['id'] ];
            watchdog( 'offline2civicrm', "Group created for \"$group_name\" with id=" . $group_tmp['id'] );
          } else {
            watchdog( 'offline2civicrm', 'Could not retrieve or create group for checks' . print_r( $group_tmp, TRUE ) );
          }
        }
      } else {
        watchdog( 'offline2civicrm', 'Could not retrieve group for checks' . print_r( $group_tmp, TRUE ) );
        return;
      }
    }

    // add the contact for the imported check into the group
    $group_contact = civicrm_api( "GroupContact", "Create", array(
      "version" => "3",
      "group_id" => $group['id'],
      "contact_id" => $contribution_info['contact_id']
    ));

    // TODO: use the wmf_common API checker when it exists
    if( is_array( $group_contact ) && array_key_exists( "is_error", $group_contact ) && $group_contact['is_error'] == "0" ){
      watchdog( 'offline2civicrm', "Successfully added GroupContact:" . print_r( $group_contact, true ) );
    } else {
      watchdog( 'offline2civicrm', "FAILED to add GroupContact:" . print_r( $group_contact, true ) );
    }
    return;
  }
  // do nothing for non-checks
}

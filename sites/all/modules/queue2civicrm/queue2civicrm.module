<?php
// include common functions
require_once( drupal_get_path( 'module', 'queue2civicrm' ) . '/queue2civicrm_common.inc' );

/**
 * Implementation of hook_menu().
 */
function queue2civicrm_menu() {
  $items = array();
  
  $items['admin/settings/queue2civicrm'] = array(
    'title' => 'Queue to CiviCRM',
    'description' => t('Configure message queue interface.'),
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue2civicrm_settings'),
  );

  $items['admin/settings/queue2civicrm/configure'] = array(
    'title' => 'Configure',
    'access arguments' => array('administer queue2civicrm'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/queue2civicrm/test'] = array(
    'title' => 'Test',
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'queue2civicrm_test',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/queue2civicrm/insert'] = array(
    'title' => 'Insert item',
    'access arguments' => array('administer queue2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queue2civicrm_insertmq_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  
  $items['queue2civicrm'] = array(
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'queue2civicrm_batch_process',
  );
  
  return $items;
}

function queue2civicrm_test() {
  require_once variable_get('queue2civicrm_stomp_path', drupal_get_path('module', 'queue2civicrm') . '/Stomp.php');
  $content = array();
  
  $content[] = '<p>Attempting connection to ' . variable_get('queue2civicrm_url', 'tcp://localhost:61613') . '... ';  
  $con = new Stomp(variable_get('queue2civicrm_url', 'tcp://localhost:61613'));
  try {
    $con->connect();
    $content[] = '[SUCCESS]</p>';
  }
  catch (Exception $e) {
    $content[] = '[FAILED]</p>' . "<p>$e</p>";
  }
  
  return implode("\n", $content);
}

/**
 * Implementation of hook_perm().
 */
function queue2civicrm_perm() {
  return array('administer queue2civicrm');
}

/**
 * Callback for menu path "admin/settings/queue2civicrm".
 */
function queue2civicrm_settings() {
  $form = array();

  $form['queue2civicrm_stomp_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Stomp Path'),
    '#required' => TRUE,
    '#default_value' => variable_get('queue2civicrm_stomp_path', drupal_get_path('module', 'queue2civicrm') . '/Stomp.php'),
	'#description' => t('Link: ') . l(t('Current version of the Stomp library'), "http://svn.wikimedia.org/viewvc/wikimedia/vendors/stomp_php/current/"),
  );

  $form['queue2civicrm_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection URL'),
    '#required' => TRUE,
    '#default_value' => variable_get('queue2civicrm_url', 'tcp://localhost:61613'),
  );

  $form['queue2civicrm_subscription'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscription path'),
    '#required' => TRUE,
    '#default_value' => variable_get('queue2civicrm_subscription', '/queue/test'),
  );

  $form['queue2civicrm_batch'] = array(
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#required' => TRUE,
    '#default_value' => variable_get('queue2civicrm_batch', 0),
    '#options' => array(
      0 => '0 (Disable)',
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
      120 => 120,
      150 => 150,
    ),
  );

  $form[ 'queue2civicrm_gateways_to_monitor' ] = array(
    '#type' => 'textfield',
    '#title' => t('Gateways to monitor'),
    '#required' => false,
    '#default_value' => variable_get( 'queue2civicrm_gateways_to_monitor', 'payflowpro, paypal' ),
    '#description' => t( 'A CSV of gateway-strings that you wish to monitor in Ganglia.  The gateway string should match the name of the gateway as defined in the "gateway" field of transaction messages.')
  );
  
  $form [ 'queue2civicrm_gmetric_tmax' ] = array(
    '#type' => 'textfield',
    '#title' => t('Default tmax for gmetric reporting (in seconds)'),
    '#required' => false,
    '#default_value' => variable_get( 'queue2civicrm_gmetric_tmax', 60 ),
    '#description' => t('TMAX indicates the freshness of a metric. If TN exceeds TMAX, then Ganglia is expecting a new value. However, TMAX is only advisory: Ganglia takes no action when TN exceeds TMAX.')
  );
  
  $form [ 'queue2civicrm_gmetric_dmax' ] = array(
  	'#type' => 'textfield',
    '#title' => t('Default dmax for gmetric reporting (in seconds)'),
    '#required' => false,
    '#default_value' => variable_get( 'queue2civicrm_gmetric_dmax', 360 ),
    '#description' => t('DMAX indicates for how long an old metric should be retained. If TN exceeds DMAX then Ganglia will consider that that metric is no longer being monitored. Therefore, it will discard information about that metric.')
  );
  
  return system_settings_form($form);
}

function queue2civicrm_batch_process() {
  set_time_limit(10);

  $processed = 0;
  
  watchdog('queue2civicrm', 'Attempting to process up to ' . variable_get('queue2civicrm_batch', 0) . ' contribution(s).');

  try {
      $con = _queue2civicrm_stomp_connection();
  }
  catch (Exception $ex) {
      wmf_common_failmail('STOMP_BAD_CONNECTION totally lacking a stomp server');
      return;
  }
  $subscription_queue = variable_get('queue2civicrm_subscription', '/queue/test');
  $con->subscribe($subscription_queue, array('ack' => 'client'));
  set_time_limit(60);

  // Attempt to dequeue items for the batch
  for ($i = 0; $i < variable_get('queue2civicrm_batch', 0); ++$i) {
    $msg = $con->readFrame();
    if ($msg === FALSE) {
        watchdog('queue2civicrm', 'Nothing to process.');
        break;
    }
    if (!$msg->body) {
        // TODO it would be smart to keep track of RECEIPT frames as they are an ack-of-ack
        watchdog('queue2civicrm', 'Popped a sweet nothing off the queue: ' . print_r($msg, TRUE));
        $i--;
        continue;
    }
    watchdog('queue2civicrm', 'Read frame:<pre>' . check_plain(print_r($msg, TRUE)) . '</pre>');      

    $success = queue2civicrm_process_message($msg);
    if ($success == 1) {
      ++$processed;
    } else {
      break;
    }
  }

  $con->unsubscribe( $subscription_queue ); 
  $con->disconnect();

  // allow for other modules to handle their own related batch processing
  $batchprocessed = module_invoke_all( 'queue2civicrm_batch_process');
  $processed += array_sum($batchprocessed);
  
  /**
   * this may some day supercede the process counts handled above...
   * 
   * Note that this might be a little whack.  At least, it feels a little sloppy.
   * The tmax/dmax fields should probably be configurable
   * through the UI rather than hardcoded here. Furthermore, we might consider specifying the names
   * of gateways to keep track of, rather than auto-generate the gateways to keep track of during 
   * queue consumption.  With the latter (current) method, we'll only report to gmetric when there
   * are > 0 msgs consumed from the queue - meaning if there are no msgs for a particular gateway, 
   * that fact will not get reported to gmetric.  But I've hardcoded the dmax param here to be the
   * same as the frequency of queue consumption, so if there are no messages in the queue for
   * a particular gateway, the gateway will report as having consumed 0 messages in ganglia anyway.
   *
   * TODO: the ganglia stuff should be a hook
   */
  $gmetric_tmax = variable_get( 'queue2civicrm_gmetric_tmax', 60 );
  $gmetric_dmax = variable_get( 'queue2civicrm_gmetric_dmax', 360 );
  $counter = _queue2civicrm_trxn_counter_get();
  foreach ( $counter->get_trxn_counts() as $gateway => $count ) {
    module_invoke( 'ganglia_reporter', 'send_metric', $gateway . ' donations', $count, 'int8', 'donations', 'both', $gmetric_tmax, $gmetric_dmax );
  }
  module_invoke( 'ganglia_reporter', 'send_metric', 'Total donations', $counter->get_count_total(), 'int8', 'donations', 'both', $gmetric_tmax, $gmetric_dmax );
  
  if ($processed > 0) {
    watchdog('queue2civicrm', 'Successfully processed ' . $processed . ' contribution(s).');
  }
  else {
    watchdog('queue2civicrm', 'No contributions processed.');
  }
}

/**
 * Remove one item from the queue and process it.
 */
function queue2civicrm_process_message($msg) {
    
    try {
        $msg_orig = $msg;
        queue2civicrm_import($msg);
        _queue2civicrm_stomp_ack_frame($msg_orig);
    }
    catch (WmfException $ex) {
        watchdog('queue2civicrm', 'something went wrong during import: '.$ex->getMessage(), WATCHDOG_ERROR);

        if ($ex->isRejectMessage()) {
            $error = "\nRemoving failed message from the queue: \n" . print_r($msg, true);
            _queue2civicrm_stomp_ack_frame($msg_orig);
            watchdog('queue2civicrm', $error, NULL, WATCHDOG_ERROR);
        }

        wmf_common_failmail($ex, $msg);

        if ($ex->isFatal()) {
            $error = "Halting Process.";
            watchdog('queue2civicrm', $error, NULL, WATCHDOG_ERROR);
            return FALSE;
        }
    }
    catch (Exception $ex) {
        $error = 'UNHANDLED ERROR CODE. exception: ' . $ex->getMessage();
        watchdog('queue2civicrm', $error, NULL, WATCHDOG_ERROR);
        wmf_common_failmail($error, $msg);
    }
    return TRUE;
}

/**
 * Process one contribution from the queue to CiviCRM.
 */
function queue2civicrm_import( $msg ) {
    // save the original message for logging
    $msg_orig = $msg;

    if (!is_array($msg)) {
        $msg = json_decode($msg->body, true);
    }

    /**
    * prepare data for logging
    */
    $log = array(
        'gateway' => $msg[ 'gateway' ],
        'gateway_txn_id' => $msg[ 'gateway_txn_id' ],
        'data' => ( is_array( $msg_orig ) ? json_encode( $msg_orig ) : $msg_orig->body ),
        'timestamp' => time(),
        'verified' => 0,
    );
    $cid = _queue2civicrm_log( $log );

    $contribution = wmf_civicrm_contribution_message_import($msg);

    // construct an array of useful info to invocations of queue2civicrm_import
    $contribution_info = array(
        'contribution_id' => $contribution['id'],
        'contact_id' => $contribution['contact_id'],
        'msg' => $msg,
    );

    // update the log if things went well
    if ( $cid ) {
        $log[ 'cid' ] = $cid;
        $log[ 'verified' ] = 1;
        $log[ 'timestamp' ] = time();
        _queue2civicrm_log( $log );
    }

    // Send thank you email, other post-import things
    module_invoke_all( 'queue2civicrm_import', $contribution_info );
    
    // keep count of the transactions
    _queue2civicrm_trxn_counter_add( $msg[ 'gateway' ] );
}

/**
 * Make the form to insert a test message into the queue
 */ 
function queue2civicrm_insertmq_form() {
  $message = queue2civicrm_generate_message();

  $form['submit1'] = array(
    '#value' => 'Insert into queue',
    '#type' => 'submit'
  );
  
  $form['queue'] = array(
    '#type' => 'textfield',
    '#title' => 'Queue to submit to',
    '#default_value' => '/queue/test_donations',
    '#required' => TRUE
  );
  
  foreach ( $message as $key => $value ) {
    $form[$key] = array(
      '#type' => 'textfield',
      '#title' => $key,
      '#default_value' => $value
    );
  }

  $form['submit2'] = array(
    '#value' => 'Insert into queue',
    '#type' => 'submit'
  );

  return $form;
}

/** 
 * Implementation of hook_form_submit
 *
 * Submits a test message to the queue
 */
function queue2civicrm_insertmq_form_submit($form, &$form_state) {
  $con = _queue2civicrm_stomp_connection();
  if($con){
	  $result = $con->send( $form_state['values']['queue'], drupal_to_js($form_state['values']), array('persistent' => true));
	  $con->disconnect();
	  if (!$result) {
		watchdog('queue2civicrm','Send to queue failed for this message: <pre>' . check_plain(print_r($form_state['values'], TRUE)) . '</pre>');
		$content = 'Failed to add item to the queue.';
		drupal_set_message($content, 'error');
	  }
	  $content = 'Success adding item to the queue!';
	  watchdog('queue2civicrm','Successfully added the following to the queue: <pre>' . check_plain(print_r($form_state['values'], TRUE)) . '</pre>');
	  drupal_set_message($content);
  }
}

/**
 * Generates random data for queue and donation insertion testing
 */
function queue2civicrm_generate_message() {
  //language codes
  $lang = array('EN','DE','FR');

  $currency_codes = array('USD', 'GBP', 'EUR', 'ILS');
  shuffle($currency_codes);
  $currency = (mt_rand(0,1)) ? 'USD' : $currency_codes[0];
  
  $message = array(
	'contribution_tracking_id' => '',
	'optout'                 => mt_rand(0,1),
	'anonymous'              => mt_rand(0,1),
	'comment'                => mt_rand(),
	'utm_source'             => mt_rand(),
	'utm_medium'             => mt_rand(),
	'utm_campaign'           => mt_rand(),
	'language'               => array_rand($lang),
	'referrer'               => 'http://example.com/'.mt_rand(),
	'email'                  => mt_rand() . '@example.com',
	'first_name'             => mt_rand(),
	'middle_name'            => mt_rand(),
	'last_name'              => mt_rand(),
	'street_address'         => mt_rand(),
	'supplemental_address_1' => '',
	'city'                   => 'San Francisco',
	'state_province'         => 'CA',
	'country'                => 'USA',
	'countryID'              => 'US',
	'postal_code'            => mt_rand(02801,99999),
	'gateway'                => 'insert_test',
	'gateway_txn_id'         => mt_rand(),
	'response'               => mt_rand(),
	'currency'               => $currency,
	'original_currency'      => $currency_codes[0],
	'original_gross'         => mt_rand(0,10000)/100,
	'fee'                    => '0',
	'gross'                  => mt_rand(0,10000)/100,
	'net'                    => mt_rand(0,10000)/100,
	'date'                   => date('r'), //time(),
  );
  return $message;
}

<?php

/**
 * Drupal hook function setting up the configuration page.
 *
 * @param array $items Currently configured menu items to modify
 *
 * @return array Menu entries
 */
function wmf_unsubscribe_qc_menu_alter(&$items) {
  $items[ 'admin/config/queue2civicrm/unsubscribe_qc' ] = array(
    'title'            => 'Unsubscribe',
    'description'      => t('Configure unsubscribe queue settings'),
    'access arguments' => array( 'administer queue2civicrm' ),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array( 'unsubscribe_qc_settings' ),
    'type'             => MENU_LOCAL_TASK,
  );
}

/**
 * Constructs the settings page for this module.
 *
 * @return array Of form components.
 */
function unsubscribe_qc_settings() {
  $form = array();

  $form[ 'unsubscribe_qc' ][ 'description' ] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Unsubscribe queue'),
    '#description' => t('The unsubscribe queue sets the opt-out flag for contacts in Civi.'),
    '#collapsible' => FALSE,
    '#collapsed'   => FALSE,
  );

  $form[ 'unsubscribe_qc' ][ 'unsubscribe_queue' ] = array(
    '#type'          => 'textfield',
    '#title'         => t('Subscription path'),
    '#required'      => TRUE,
    '#default_value' => variable_get('unsubscribe_queue', '/queue/unsubscribe_test'),
    '#description'   => t('The path to the unsubscribe queue.'),
  );

  $form[ 'unsubscribe_qc' ][ 'unsubscribe_batch' ] = array(
    '#type'          => 'select',
    '#title'         => t('Cron batch size'),
    '#required'      => TRUE,
    '#default_value' => variable_get('unsubscribe_batch', 0),
    '#options'       => array(
      0   => '0 (Disable)',
      1   => 1,
      5   => 5,
      10  => 10,
      50  => 50,
      75  => 75,
      100 => 100,
      150 => 150,
      300 => 300,
      500 => 500,
      750 => 750,
      1000 => 1000
    ),
  );

  return system_settings_form($form);
}

/**
 * Callback from Drush that actually executes the loop for processing messages in the queue.
 * @ref unsubscribe_process_message
 * @ref drush_unsubscribe_queue_consume
 */
function unsubscribe_batch_process() {
  watchdog('unsubscribe', 'Executing: unsubscribe_batch_process');

  $processed = wmf_common_dequeue_loop(
    variable_get('unsubscribe_queue', '/queue/unsubscribe-test'),
    variable_get('unsubscribe_batch', 0),
    'unsubscribe_process_message'
  );

  if ($processed > 0) {
    watchdog('unsubscribe', 'Successfully processed ' . $processed . ' unsubscribe(s).');
  }
  else {
    watchdog('unsubscribe', 'No unsubscribes processed.');
  }
}

/**
 * Processes an individual unsubscribe message. The message must contain the email address and
 * the contribution ID. The contribution ID is required because, as a protection mechanism, we want
 * unsubscribe emails to be single shot. Therefore we obtain the contact ID from the contribution ID
 * (in case someone has gone through and de-duped contacts since the email was sent) and check its
 * unsubscribe status taking one of two actions after:
 *
 * - If an contact has already opted out we abort and do no further action.
 * - Otherwise, we opt out that contact and then do a Civi search for all matching emails - opting
 *   out those contacts as well.
 *
 * @param $msg A STOMP message class.
 *
 * @return bool True if the contact was processed without errors. False if errors occured; the msg
 *              will still have been removed from the queue though.
 */
function unsubscribe_process_message($msg) {
  $retval = FALSE;

  try {
    $txnid = $msg->headers['correlation-id'];
    watchdog('unsubscribe', "Beginning processing of message $txnid: " . json_encode($msg), array(), WATCHDOG_INFO);

    // Sanity checking :)
    $body = json_decode($msg->body, TRUE);
    if (( !array_key_exists('email', $body) ) || (!array_key_exists('contribution-id', $body) )) {
      $error = "$txnid: Required field not present! Dropping message on floor.";
      throw new WmfException( 'UNSUBSCRIBE', $error );
    }

    $emails = array(strtolower($body['email']));
    $contribId = $body['contribution-id'];
    watchdog('unsubscribe', "$txnid: Acting on contribution ID '$contribId'", array(), WATCHDOG_INFO);

    // Find the contact from the contribution ID and check opt out status
    $contacts = unsubscribe_get_emails_from_contribution($contribId);

    if (count($contacts) === 0) {
      watchdog('unsubscribe', "$txnid: No contacts returned for contribution ID $contribId. Acking frame and returning.", WATCHDOG_NOTICE);
      $retval = TRUE;

    } elseif ($contacts[0]['is_opt_out'] == TRUE) {
      watchdog('unsubscribe', "$txnid: Contact already opted out with this contribution ID.", WATCHDOG_NOTICE);
      $retval = TRUE;

    } else {
      // Excellent -- we have a collection of emails to unsubscribe now! :) Add them to the array
      foreach ($contacts as $contact) {
        $email = strtolower($contact['email']);
        if (!in_array($email, $emails)) {
          $emails[] = $email;
        }
      }

      // And opt them out
      $count = unsubscribe_opt_out_emails($emails);
      watchdog('unsubscribe', "$txnid: Successfully updated $count rows.");
      $retval = TRUE;
    }

  } catch ( WmfException $ex ) {
    watchdog('unsubscribe', $ex->getMessage(), array(), WATCHDOG_ERROR);

    if (!$ex->isNoEmail()) {
      wmf_common_failmail( 'unsubscribe', $ex->getMessage() );
    }

    if ($ex->isFatal()) {
      throw $ex;
    }
  }
  wmf_common_stomp_ack_frame($msg);
  return $retval;
}

/**
 * Obtains a list of arrays of (contact ID, is opt out, email address) for
 * the contact specified by the given contribution.
 *
 * @param int $ctid  The Civi contribution ID
 *
 * @return array
 */
function unsubscribe_get_emails_from_contribution($ctid) {
  $query = 'SELECT con.id, con.is_opt_out, e.email';
  $query .= ' FROM civicrm_contribution ct, civicrm_contact con';
  $query .= ' LEFT JOIN civicrm_email e';
  $query .= '  ON con.id=e.contact_id';
  $query .= ' WHERE ct.id = :id AND ct.contact_id=con.id';

  $dbs = wmf_civicrm_get_dbs();
  $dbs->push( 'civicrm' );

  $res = db_query( $query, array( ':id' => $ctid ) );

  $out = array();
  foreach ( $res as $contact ) {
    $out[] = array(
      'contact_id' => (int)$contact->id,
      'is_opt_out' => (bool)$contact->is_opt_out,
      'email' => $contact->email,
    );
  }
  return $out;
}

/**
 * Updates the Civi database with an opt out record for the specified email address
 *
 * @param array   $emails   Email addresses to unsubscribe
 *
 * @returns Number of effected rows
 */
function unsubscribe_opt_out_emails($emails) {
  $escaped = array();
  foreach ($emails as $email) {
    $escaped[] = "'" . addslashes( $email ) . "'";
  }
  $email_condition = 'e.email IN (' . implode(', ', $escaped) . ')';

  $query = <<<EOS
UPDATE civicrm_contact con, civicrm_email e
    SET con.is_opt_out = 1
    WHERE con.id = e.contact_id AND {$email_condition}
EOS;

  $dbs = wmf_civicrm_get_dbs();
  $dbs->push( 'civicrm' );

  $result = db_query( $query );
  return $result->rowCount();
}

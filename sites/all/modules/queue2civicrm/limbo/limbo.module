<?php
/**
 * An extension of the queue2civicrm module to handle the PSC and limbo queue
 * 
 */

// include common functions
require_once( drupal_get_path( 'module', 'queue2civicrm' ) . '/queue2civicrm_common.inc' );
require_once( drupal_get_path( 'module', 'limbo' ) . '/limbo_common.inc' );

/**
 * Implementation of hook_menu_alter
 * 
 * Used to inject recurring menu item to Queue2civicrm configuration
 */
function limbo_menu_alter( &$items ) {
  $items['admin/settings/queue2civicrm/limbo'] = array(
  'title' => 'Limbo queue manager',
  'description' => t( 'Configure limbo queue settings' ),
  'access arguments' => array( 'administer queue2civicrm' ),
  'page callback' => 'drupal_get_form',
  'page arguments' => array( 'limbo_settings' ),
  'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/**
 * Settings form for limbo queue configuration
 */
function limbo_settings() {
  $form = array();
 
  $form[ 'limbo' ][ 'description' ] = array(
    '#type' => 'fieldset',
    '#title' => t( 'Limbo queue settings' ),
    '#description' => t( 'Use the form below to configure settings for the limbo queue.' ),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form[ 'limbo' ][ 'limbo_subscription' ] = array(
    '#type' => 'textfield',
    '#title' => t('Subscription path'),
    '#required' => TRUE,
    '#default_value' => variable_get('limbo_subscription', '/queue/limbo_test'),
    '#description' => t( 'The path to the limbo queue.' ),
  );

  $form['limbo_batch'] = array(
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#required' => TRUE,
    '#default_value' => variable_get('limbo_batch', 0),
    '#options' => array(
      0 => '0 (Disable)',
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
      120 => 120,
      150 => 150,
    ),
  );
  
  return system_settings_form( $form );
}


function limbo_batch_process() {
    set_time_limit( 60 );

    watchdog('limbo', 'Executing: limbo_batch_process');

    $processed = wmf_common_dequeue_loop(
        variable_get( 'limbo_subscription', '/queue/limbo_test' ),
        variable_get( 'limbo_batch', 0 ),
        'limbo_process_message'
    );
    
    if ( $processed > 0 ) {
        watchdog('limbo', 'Successfully processed ' . $processed . ' contribution(s).');
    }
    else {
        watchdog('limbo', 'No contributions processed.');
    }
}

function limbo_process_message( $msg ) {
    if ( empty( $msg->body ) ) {
        watchdog('limbo', 'Throwing out antimessage: ' . check_plain(print_r($msg, TRUE)));
        wmf_common_stomp_ack_frame( $msg );
        return TRUE; //XXX unfortunate
    }

    watchdog('limbo', 'Read frame:<pre>' . check_plain(print_r($msg, TRUE)) . '</pre>');        
    try {
        $msg_orig = $msg;
        limbo_import($msg);
        wmf_common_stomp_ack_frame( $msg_orig );
        return TRUE;
    }
    catch ( WmfException $ex ) {
        watchdog('limbo', 'problem during limbo import: ' . $ex->getMessage(), array(), WATCHDOG_ERROR);

        if ( $ex->isRejectMessage() ) {
            $error = "\nRemoving failed message from the queue: \n" . print_r($msg, true);
            wmf_common_stomp_ack_frame( $msg_orig );
            watchdog('limbo', $error, NULL, WATCHDOG_ERROR);
        }
        wmf_common_failmail($ex, $msg);

        if ( $ex->isFatal() ) {
            watchdog('limbo', t("Halting Processing."), NULL, WATCHDOG_ERROR);
            return FALSE;
        }
    }
    catch ( Exception $e ) {
        $error = 'Could not process frame from queue, unknown error: ' . $ex->getMessage();
        watchdog('limbo', $error, array(), WATCHDOG_ERROR );
        wmf_common_failmail( $error, $msg );
    }
    return FALSE;
}

/**
 * Process one order from the limbo queue to `queue2civicrm_limbo`.
 */
function limbo_import( $msg ) {
  // save the original message for logging
  $msg_orig = $msg;

  $msg = limbo_verify_and_stage($msg);

  $msg['data'] = ( is_array( $msg_orig ) ? json_encode( $msg_orig ) : $msg_orig->body );
  $msg['timestamp'] = $msg['date'];

  watchdog('limbo', 'Limbo:<pre>' . check_plain(print_r($msg, TRUE)) . '</pre>');  
  $queue2civicrm_limbo_id = _limbo_insert_queue2civicrm_limbo($msg);
}

function limbo_verify_and_stage($msg){
  if ( !is_array( $msg ) ) {
    $msg = json_decode($msg->body, true);
  }

  if (!isset($msg['order_id']) && isset($msg['gateway_txn_id'])){
      $msg['order_id'] = $msg['gateway_txn_id'];
  }

  $required = array(
    'contribution_tracking_id' => '',
    'gateway' => '',
    'order_id' => '',
    'payment_method' => '',
    'payment_submethod' => '',
  );

  foreach ($required as $key=>$value){
    if (!isset($msg[$key])){
      throw new WmfException( "CIVI_REQ_FIELD",
        t( 'Required Field "%key" not found in message:', array( '%key' => $key ) ),
        $msg
      );
    }
  }

  $msg = _limbo_normalize_msg( $msg );

  return $msg;
}


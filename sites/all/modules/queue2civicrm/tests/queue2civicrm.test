<?php

class Queue2CiviCRMTest extends DrupalUnitTestCase {

	public static function getInfo() {
		return array(
			'name' => 'Queue 2 CiviCRM tests',
			'description' => 'Tests for the queue2civicrm module.',
			'group' => 'Pipeline',
		);
	}

	function setUp(){
		variable_set('queue2civicrm_subscription', '/queue/civiCRM_test');
		variable_set('queue2civicrm_url', 'tcp://localhost:61613');
	}

	//determine that we are in fact able to read and write to activeMQ
	function testStompPushPop() {
		$this->emptyQueue();
		//queue2civicrm_insertmq_form_submit($form, &$form_state) $form_state['values'] appears to be where all the $key=>$value form pairs live.
		////Just fake it out. :p queue2civicrm_generate_message() will do nicely.
		$message = queue2civicrm_generate_message();
		//I think we want gateway_txn_id and contribution_tracking_id to match much the same way we did before.
		$message['gateway_txn_id'] = "civiTest";
		$message['contribution_tracking_id'] = $message['gateway_txn_id'];
		$message['queue'] = variable_get('queue2civicrm_subscription', '/queue/oopsie');
		$message = array('values' => $message);

		$ret = queue2civicrm_insertmq_form_submit(array(), $message);
		$message_return = $this->getItemFromQueue();
		$this->assertTrue(is_object($message_return), "No message was returned");
		$body = json_decode($message_return->body, true);
		foreach($message['values'] as $key=>$value){
			$this->assertTrue($body[$key] == $value, $body[$key] . " != $value");
		}
	}

	function testConnect(){
		$this->assertDrushLogEmpty(true);
		variable_set('queue2civicrm_url', 'CompleteNonsense');
		$con = _queue2civicrm_stomp_connection(true);
		$this->assertTrue($con === false, "Connection did not fail appropriately.");
		//check for the drush errors...
		$this->assertDrushLogEmpty(false);
		$this->assertCheckDrushLog('STOMP_BAD_CONNECTION', true, "Appropriate Drush error was not thrown.");

		//put everything back to normal
		$this->assertDeleteDrushLog();
		variable_set('queue2civicrm_url', 'tcp://localhost:61613'); //@fixme: This should be grabbing from an ini or something.
		$con = _queue2civicrm_stomp_connection(true);

		$this->assertTrue($con !== false, "Connection failed, and should have worked the second time 'round.");
	}

	function testRequiredFields(){
		error_reporting(E_ALL);
		$this->assertDeleteDrushLog();

		//Should be required:
		//first, last, email, amount, currency, payment type, gateway transaction ID
		$required = array(
			'email' => 'testing@test.com',
			'gross' => '7.77',
			'original_currency' => 'USD',
			'gateway' => 'something',
			'gateway_txn_id' => '11235'
		);
		queue2civicrm_import( $required );
		$this->assertDrushLogEmpty(true);

		foreach ($required as $key=>$value){
			$msg = $required;
			unset($msg[$key]);
			queue2civicrm_import( $msg );
			$this->assertDrushLogEmpty(false);
			$this->assertCheckDrushLog('CIVI_REQ_FIELD', true, "Missing required $key does not trigger an error.");
			$this->assertDeleteDrushLog();
		}

		$test_name = array(
			'first_name' => 'Testy',
			'middle_name' => 'T.',
			'last_name' => 'Testaberger',
			'gross' => '8.88',
			'gateway_txn_id' => '12358'
		);

		$msg = array_merge($required, $test_name);
		queue2civicrm_import( $msg );
		$this->assertDrushLogEmpty(true);

	}

	function testCurrencyConversion(){
		$test_currency_conversion = array(
			'email' => 'testing@test.com',
			'gross' => '7.77',
			'original_currency' => 'EUR',
			'gateway' => 'something',
			'gateway_txn_id' => '11235'
		);
		$msg = queue2civicrm_verify_and_stage($test_currency_conversion);
		$this->assertTrue($test_currency_conversion['gross'] == $msg['original_gross'], "Original Gross in converted message does not match actual original gross.");
		$this->assertTrue($test_currency_conversion['gross'] != $msg['gross'], "Gross is identical: No conversion was done (unless " . $test_currency_conversion['original_currency'] . " = USD for a minute");

		$test_currency_conversion['original_currency'] = 'USD';
		$msg = queue2civicrm_verify_and_stage($test_currency_conversion);
		$this->assertTrue($test_currency_conversion['gross'] == $msg['original_gross'], "Original Gross in converted message does not match actual original gross.");
		$this->assertTrue($test_currency_conversion['gross'] == $msg['gross'], "USD to USD Gross is not identical!");
	}

	function testGetTopError(){
		$this->assertDeleteDrushLog();
		$error = _queue2civicrm_get_top_new_drush_error();
		//should return false
		$this->assertFalse($error, "There are no drush errors to return, but we got '$error'");

		//now throw three errors, and make sure the most severe is returned.
		drush_set_error("IMPORT_TAG", "Test Error Message #1");
		drush_set_error("CIVI_CONFIG", "Test Error Message #2");
		drush_set_error("IMPORT_CONTACT", "Test Error Message #3");
		$error = _queue2civicrm_get_top_new_drush_error();

		//looking for the CIVI_CONFIG error
		$this->assertTrue($error['err_code'] === 'CIVI_CONFIG', "New top error should be CIVI_CONFIG; returned " . $error['err_code']);
		$this->assertTrue($error['err_text'] === "Messages:\n  Test Error Message #2", "Expected message not returned: " . $error['err_text']);

		//now stack some slightly less important errors and see if we get exactly the new ones.
		drush_set_error("IMPORT_CONTACT", "Test Error Message #4");
		drush_set_error("IMPORT_CONTACT", "Test Error Message #5");
		drush_set_error("IMPORT_CONTACT", "Test Error Message #6");
		$error = _queue2civicrm_get_top_new_drush_error();

		$this->assertTrue($error['err_code'] === 'IMPORT_CONTACT', "New top error should be IMPORT_CONTACT; returned " . $error['err_code']);
		$this->assertTrue($error['err_text'] === "Messages:\n  Test Error Message #4\n  Test Error Message #5\n  Test Error Message #6", "Expected message not returned: " . $error['err_text']);

	}

	function getItemFromQueue(){
	  $con = _queue2civicrm_stomp_connection();
	  $this->assertTrue(is_object($con), "Could not establish stomp connection");
	  $subscription_queue = variable_get('queue2civicrm_subscription', '/queue/test');
	  if ($con) {
		$con->subscribe($subscription_queue, array('ack' => 'client'));

		$msg = $con->readFrame();

		// Skip processing if no message to process.
		if ($msg !== FALSE) {
		  watchdog('queue2civicrm', 'Read frame:<pre>' . check_plain(print_r($msg, TRUE)) . '</pre>');
		  set_time_limit(60);
		  try {
			$con->ack($msg);
			return $msg;
		  }
		  catch (Exception $e) {
			watchdog('queue2civicrm', 'Could not process frame from queue.', array(), WATCHDOG_ERROR);
		  }
		}
		else {
		  watchdog('queue2civicrm', 'Nothing to process.');
		}
		$con->unsubscribe( $subscription_queue );
	  }
	  return FALSE;
	}

	function emptyQueue(){
		while (is_object($this->getItemFromQueue())){
			//uh. Yeah. That. Weirdest while loop EVAR.
		}
	}

	function assertDeleteDrushLog(){
		$error_log =& drush_get_context('DRUSH_ERROR_LOG', array());
		$error_log = array();  //gwa ha ha ha
		$error = drush_get_error_log();
		$this->assertTrue(empty($error), "Drush error log should now be empty" . print_r($error, true));
	}

	function assertCheckDrushLog($drush_error_type, $exists, $assertFailMessage){
		$error = drush_get_error_log();
		$this->assertTrue(array_key_exists($drush_error_type, $error) === $exists, $assertFailMessage . "\nLooking for $drush_error_type\n" . print_r($error, true));
	}

	function assertDrushLogEmpty($state){
		$error = drush_get_error_log();
		$message = "Drush log should " . (($state)?"":"not ") . "be empty\n" . print_r($error, true);
		$this->assertTrue(empty($error) === $state, $message);
	}

}

?>
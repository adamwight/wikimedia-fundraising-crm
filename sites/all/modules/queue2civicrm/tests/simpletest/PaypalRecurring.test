<?php

require_once __DIR__ . '/BaseTestCase.php';
require_once __DIR__ . '/../includes/Message.php';

class PaypalRecurringTest extends BaseTestCase {
    public static function getInfo() {
        return array(
            'name' => 'PayPal recurring',
            'group' => 'Donations Pipeline',
            'description' => 'Process recurring messages',
        );
    }

    public function setUp() {
        parent::setUp();

        $this->subscr_id = mt_rand();
        $this->amount = '2.01';

        $this->subscription_message = new TransactionMessage( array(
            'txn_type' => 'subscr_signup',
            'subscr_id' => $this->subscr_id,
            'original_gross' => $this->amount,
            'gross' => $this->amount,
            'amount' => $this->amount,
            'frequency_unit' => 'month',
            'frequency_interval' => '1',
            'installments' => '10',
            'create_date' => strtotime( '2000-01-01 00:01:02' ),
            'start_date' => strtotime( '2000-01-01 01:02:03' ),
        ) );

        $this->payment_message = new TransactionMessage( array(
            'txn_type' => 'subscr_payment',
            'subscr_id' => $this->subscr_id,
            'original_gross' => $this->amount,
            'gross' => $this->amount,
            'payment_date' => strtotime( "2000-02-01 01:02:03" ),
        ) );

        $this->expire_message = new TransactionMessage( array(
            'txn_type' => 'subscr_eot',
            'subscr_id' => $this->subscr_id,
        ) );

        $this->cancel_message = new TransactionMessage( array(
            'txn_type' => 'subscr_cancel',
            'subscr_id' => $this->subscr_id,
            'cancel_date' => strtotime( '2000-04-01 00:01:02' ),
        ) );

        $this->failed_message = new TransactionMessage( array(
            'txn_type' => 'subscr_failed',
            'subscr_id' => $this->subscr_id,
            'failure_count' => '3',
            'failure_retry_date' => strtotime( '2000-05-01 00:01:02' ),
        ) );

        //TODO: modification messages are not processed currently
    }

    public function testNormalPayment() {
        recurring_import( $this->subscription_message );
        $result = recurring_import( $this->payment_message );
        $this->assertEqual( 1, $result,
            "Normal recurring payment processed successfully" );

        $payment_data = $this->payment_message->getBody();

        $contributions = wmf_civicrm_get_contributions_from_gateway_id( $payment_data['gateway'], $payment_data['gateway_txn_id'] );
        $recur_record = recurring_get_recur_record( $this->subscr_id );

        $this->verbose( json_encode( $contributions ) );
        $this->assertSuperset( $contributions, array(
            array(
                'original_amount' => $this->amount,
                'contribution_recur_id' => $recur_record->id,
            ),
        ) );

        $this->verbose( json_encode( $recur_record ) );
        $this->assertSuperset( get_object_vars( $recur_record ), array(
            'amount' => $this->amount,
            'next_sched_contribution' => '2000-03-01 01:02:03',
            'frequency_interval' => '1',
            'frequency_unit' => 'month',
            'cycle_day' => '1',
            'create_date' => '2000-01-01 00:01:02',
            'start_date' => '2000-01-01 01:02:03',
            'end_date' => null,
            'installments' => '10',
            'trxn_id' => (string)$this->subscr_id,
        ) );
    }

    public function testNoSubscription() {
        $result = recurring_import( $this->payment_message );
        $this->assertEqual( 2, $result,
            "Payment linking to an invalid subscription is rejected" );
    }

    public function testExpire() {
        recurring_import( $this->subscription_message );
        $result = recurring_import( $this->expire_message );
        $this->assertEqual( 1, $result,
            "Expiry message processed" );

        $recur_record = recurring_get_recur_record( $this->subscr_id );
        $this->assertNotNull( $recur_record->end_date );
    }

    public function testCancel() {
        recurring_import( $this->subscription_message );
        $result = recurring_import( $this->cancel_message );
        $this->assertEqual( 1, $result,
            "Cancellation message processed" );

        $recur_record = recurring_get_recur_record( $this->subscr_id );
        $this->assertSuperset( get_object_vars( $recur_record ), array(
            'end_date' => '2000-04-01 00:01:02',
            'cancel_date' => '2000-04-01 00:01:02',
        ) );
    }

    public function testFailed() {
        recurring_import( $this->subscription_message );
        $result = recurring_import( $this->failed_message );
        $this->assertEqual( 1, $result,
            "Failure notification message processed" );

        $recur_record = recurring_get_recur_record( $this->subscr_id );
        $this->assertSuperset( get_object_vars( $recur_record ), array(
            'failure_count' => '3',
            'failure_retry_date' => '2000-05-01 00:01:02',
        ) );
    }
}

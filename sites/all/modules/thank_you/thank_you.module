<?php

function thank_you_menu() {
  $items = array();
  
  $items['admin/settings/thank_you'] = array(
    'title' => t('Thank you settings'),
    'description' => t('Configure thank you note options.'),
    'access arguments' => array('administer thank you'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thank_you_settings_form'),
  );
  
  $items['thank_you/%'] = array(
    'access arguments' => array('administer thank you'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thank_you_preview_form', 1),
    'type' => MENU_CALLBACK,
  );

  $items['thank_you/unsubscribe'] = array(
    'title' => 'Wikimedia Foundation Unsubscribe',
    'access arguments' => array('unsubscribe via thank you'),
    'page callback' => 'unsubscribe_page',
    'type' => MENU_CALLBACK
  );
  
  return $items;
}

function thank_you_perm() {
  return array('administer thank you', 'unsubscribe via thank you');
}

function thank_you_preview_form($form_state, $contribution_id) {
  $form = array();
  
  $rendered = thank_you_render($contribution_id);
  
  $form['contribution_id'] = array(
    '#type' => 'hidden',
    '#value' => $contribution_id,
  );
  
  $form['from'] = array(
    '#value' => '<div>From: &quot;' . $rendered['from_name'] . '&quot; &lt;' . $rendered['from_address'] . '&gt;</div>',
  );

  $form['to'] = array(
    '#value' => '<div>To: &quot;' . $rendered['to_name'] . '&quot; &lt;' . $rendered['to_address'] . '&gt;</div>',
  );

  $form['subject'] = array(
    '#value' => '<div>Subject: ' . $rendered['subject'] . '</div>',
  );

  $form['body'] = array(
    '#value' => '<div>Body:</div><div><pre>' . $rendered['body_plaintext'] . '</pre></div>',
  );
  
  $form['send'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
  );
  
  return $form;
}

function thank_you_preview_form_submit($form, $form_state) {
  $form_values = $form_state['values'];

  $status = thank_you_send($form_values['contribution_id']);
  if ($status === TRUE) {
    drupal_set_message('Thank you note sent.');
  }
  else {
    if ($status == -1) {
      drupal_set_message('Thank you note sending failed: donation is too old.', 'error');
    }
    else if ($status == -2) {
      drupal_set_message('Thank you note sending failed: donation has already been thanked.', 'error');      
    }
    else if ($status == -3) {
      drupal_set_message('Thank you note sending failed: sending the email failed.', 'error');      
    }
  }
}

function thank_you_render( $contribution_id ) {
	require_once dirname( __FILE__ ) . '/' . 'i18n/thank_you.i18n.php';
	civicrm_initialize( true );
	$contribution = civicrm_api("Contribution","get", array (
		'version' =>'3',
		'contribution_id' => $contribution_id
	));
	# TODO: check is_error and/or count
	if ( is_array( $contribution ) ) {
		$contribution = $contribution[ 'values' ][ $contribution_id ];
	}
	$contact = civicrm_api("Contact","get", array (
		'version' =>'3',
		'contact_id' => $contribution[ 'contact_id' ],
		'return' => "display_name,first_name,last_name,email,preferred_language"
	));
	# TODO: check is_error and/or count
	if ( is_array( $contact ) ) {
		$contact = $contact[ 'values' ][ $contribution[ 'contact_id' ] ];
	}

	# load the default values
	$rendering = array();
	$rendering[ 'from_name' ] = variable_get( 'thank_you_from_name', '' );
	$rendering[ 'to_name' ] = variable_get( 'thank_you_to_name', '{contact.display_name}' );
	if ( !$rendering[ 'to_name' ] ) {
		$rendering[ 'to_name' ] = variable_get( 'thank_you_to_name_secondary', '' );
	}
	$rendering[ 'from_address' ] = variable_get( 'thank_you_from_address', '' );
	$rendering[ 'subject' ] = variable_get( 'thank_you_subject', '' );
	$rendering[ 'body_plaintext' ] = variable_get( 'thank_you_body_plaintext', '' );
	$rendering[ 'body_html' ] = variable_get( 'thank_you_body_html', '' );
	$rendering[ 'to_address' ] = '{contact.email}';

	# attempt to get localizations
	$locale = $contact['preferred_language'];
	$lang = substr($locale, 0, 2);
	if ( !isset( $lang ) or $lang == '') {
		$lang = "en";
	}
	# check to see if a matching localization was found
	if ( isset( $messages ) and array_key_exists( $lang, $messages ) ) {
		# loop through the localizations and replace the defaults
		foreach ( $rendering as $key => $value ){
			# check if the current key has a localized value
			if ( array_key_exists( 'thank_you_' . $key, $messages[ $lang ] ) ){
				$rendering[ $key ] = $messages[ $lang ][ 'thank_you_' . $key ];
			}
		}
	}
	else{
		# do nothing, default to en
	}
	# replace the tokens with the contact/contribution data
	$contribution['date'] = date('Y-m-d', strtotime($contribution['receive_date']));
	$contribution['source'] = $contribution['contribution_source'];

	foreach ( $contribution as $c_key => $c_value ) {
		foreach ( $rendering as $r_key => $r_value ){
			$rendering[ $r_key ] = str_replace( '{contribution.' . $c_key . '}', $c_value, $rendering[ $r_key ] );
		}
	}
	foreach ( $contact as $c_key => $c_value ) {
		foreach ( $rendering as $r_key => $r_value ){
			$rendering[ $r_key ] = str_replace( '{contact.' . $c_key . '}', $c_value, $rendering[ $r_key ] );
		}
	}
	$rendering[ 'to_address' ] = str_replace( '{contact.email}', $contact['email'], $rendering[ 'to_address' ] );

	# generate and add the unsubscription link
	$hash = sha1( $contribution_id . $contribution[ 'contact_id' ] . $contribution[ 'trxn_id' ] );
	global $base_url;
	$unsub_url = "$base_url/thank_you/unsubscribe?c=$contribution_id&h=$hash";
	$rendering['body_plaintext'] = str_replace( '{unsubscribe_link}', $unsub_url, $rendering['body_plaintext'] );
	$rendering['body_html'] = str_replace( '{unsubscribe_link}', $unsub_url, $rendering['body_html'] );

	return $rendering;
}

function thank_you_send( $contribution_id ) {
	civicrm_initialize(true);
	$contribution = civicrm_api("Contribution","get", array (
		'version' =>'3',
		'contribution_id' => $contribution_id
	));
	# TODO: check is_error and/or count
	if ( is_array( $contribution ) ) {
		$contribution = $contribution[ 'values' ][ $contribution_id ];
	}
	if (strtotime($contribution['receive_date']) < time() - 86400 * variable_get('thank_you_days', 14)) {
		return -1;
	}
	
	if (array_key_exists('thankyou_date', $contribution) && is_numeric($contribution['receive_date']) && $contribution['receive_date'] > 0 ) {
		return -2;
	}
	
	$rendered = thank_you_render( $contribution_id );
	
	$from = '"' . $rendered['from_name'] . '" <' . $rendered['from_address'] . '>';
	$to = '"' . $rendered['to_name'] . '" <' . $rendered['to_address'] . '>';
	$subject = $rendered['subject'];
	$body_plaintext = $rendered['body_plaintext'];
	$body_html = $rendered['body_html'];
	
	$headers = array(
		'Sender' => $from,
		);
	
	$message_debug = array(
		'From' => $from,
		'To' => $to,
		'Subject' => $subject,
		'Body' => $body_plaintext,
		);
	
	if ( thank_you_mail_send( 'thank_you', $to, $subject, $body_plaintext, $body_html, $from, $headers ) ) {
		$contribution_result = civicrm_api("Contribution","update", array (
			'version' =>'3',
			'contribution_id' => $contribution_id,
		  	'contact_id' => $contribution['contact_id'],
			'thankyou_date' => date( 'Y-m-d H:i:s' ),
		));
		watchdog('thank_you', 'Sending thank you message succeeded for contribution: ' . $contribution_id . '<pre>' . check_plain(print_r($message_debug, TRUE)) . '</pre>');
		return TRUE;
	}
	else {
		watchdog('thank_you', 'Sending thank you message failed for contribution: ' . $contribution_id . '<pre>' . check_plain(print_r($message_debug, TRUE)) . '</pre>', array(), WATCHDOG_ERROR);
	}
	
	return -3;
}

function thank_you_settings_form() {
  $form = array();
  
  $form['thank_you_from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('From name (default)'),
    '#default_value' => variable_get('thank_you_from_name', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_from_address'] = array(
    '#type' => 'textfield',
    '#title' => t('From address'),
    '#default_value' => variable_get('thank_you_from_address', ''),
    '#required' => TRUE,
  );

  $form['thank_you_to_name'] = array(
    '#type' => 'textfield',
    '#title' => t('To name (default)'),
    '#default_value' => variable_get('thank_you_to_name', '{contact.display_name}'),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_to_name_secondary'] = array(
    '#type' => 'textfield',
    '#title' => t('To name (if the name above is blank, default)'),
    '#default_value' => variable_get('thank_you_to_name_secondary', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject (default)'),
    '#default_value' => variable_get('thank_you_subject', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_body_plaintext'] = array(
    '#type' => 'textarea',
    '#title' => t('Body Plaintext(default)'),
    '#default_value' => variable_get('thank_you_body_plaintext', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );

  $form['thank_you_body_html'] = array(
    '#type' => 'textarea',
    '#title' => t('Body HTML(default)'),
    '#default_value' => variable_get('thank_you_body_html', ''),
    '#required' => TRUE,
    '#description' => t('*** This is overwritten by any translations that may exist ***')
  );
  
  $form['thank_you_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Days before considering transaction too old to automatically thank'),
    '#default_value' => variable_get('thank_you_days', 14),
    '#required' => TRUE,
  );
  $form['thank_you_failmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Notification Address'),
    '#required' => FALSE,
    '#default_value' => variable_get('thank_you_failmail', ''),
  );
  
  return system_settings_form($form);
}

function thank_you_queue2civicrm_import( $contribution_info ) {
  $contribution_id = $contribution_info[ 'contribution_id' ];
  watchdog('thank_you', 'Calling thank you function for contribution: ' . $contribution_id . '<pre>' . check_plain(print_r($contribution_info, TRUE)) . '</pre>');
  thank_you_send( $contribution_id );
}

function thank_you_mail_send($mailkey, $to, $subject, $body_plaintext, $body_html, $from = NULL, $headers = array()) {
  $semi_rand = md5(time());
  $mime_boundary = "==MULTIPART_BOUNDARY_$semi_rand";
  $mime_boundary_header = chr(34) . $mime_boundary . chr(34);
	
  $defaults = array(
    'MIME-Version' => '1.0',
    'Content-Type' => "multipart/alternative; boundary=$mime_boundary_header; charset=UTF-8; format=flowed",
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );
  // To prevent e-mail from looking like spam, the addresses in the Sender and
  // Return-Path headers should have a domain authorized to use the originating
  // SMTP server.  Errors-To is redundant, but shouldn't hurt.
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  if ($default_from) {
    $defaults['From'] = $defaults['Reply-To'] = $defaults['Sender'] = $defaults['Return-Path'] = $defaults['Errors-To'] = $default_from;
  }
  if ($from) {
    $defaults['From'] = $defaults['Reply-To'] = $from;
  }

  $body = "
--$mime_boundary
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7Bit

$body_plaintext

--$mime_boundary
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: 7Bit

$body_html

--$mime_boundary--";

  $headers = array_merge($defaults, $headers);
  // Custom hook traversal to allow pass by reference
  foreach (module_implements('mail_alter') AS $module) {
    $function = $module .'_mail_alter';
    $function($mailkey, $to, $subject, $body, $from, $headers);
  }
  // Allow for custom mail backend
  if (variable_get('smtp_library', '') && file_exists(variable_get('smtp_library', ''))) {
    include_once './' . variable_get('smtp_library', '');
    return drupal_mail_wrapper($mailkey, $to, $subject, $body, $from, $headers);
  }
  else {
    // Note: if you are having problems with sending mail, or mails look wrong
    // when they are received you may have to modify the str_replace to suit
    // your systems.
    //  - \r\n will work under dos and windows.
    //  - \n will work for linux, unix and BSDs.
    //  - \r will work for macs.
    //
    // According to RFC 2646, it's quite rude to not wrap your e-mails:
    //
    // "The Text/Plain media type is the lowest common denominator of
    // Internet e-mail, with lines of no more than 997 characters (by
    // convention usually no more than 80), and where the CRLF sequence
    // represents a line break [MIME-IMT]."
    //
    // CRLF === \r\n
    //
    // http://www.rfc-editor.org/rfc/rfc2646.txt

    $mimeheaders = array();
    foreach ($headers as $name => $value) {
      $mimeheaders[] = $name .': '. mime_header_encode($value);
    }
    return mail(
      $to,
      mime_header_encode($subject),
      str_replace("\n", "\r\n", str_replace("\r", '', $body)),
      join("\r\n", $mimeheaders)
    );
  }
}
function unsubscribe_page(){
	require_once dirname( __FILE__ ) . '/' . 'i18n/thank_you.i18n.php';
	drupal_add_css( drupal_get_path('module', 'thank_you') . '/unsubscribe.css' );
	$matches = array();
	$contrib_id = ( preg_match( '([a-zA-Z0-9]+)', $_REQUEST['c'], $matches ) == 1 ) ? $matches[0] : "";
	$hash_get = ( preg_match( '([a-zA-Z0-9]+)', $_REQUEST['h'], $matches ) == 1 ) ? $matches[0] : "";

	civicrm_initialize(true);
	$contribution = civicrm_api("Contribution","get", array (
		'version' =>'3',
		'contribution_id' => $contrib_id
	));

	if( is_array( $contribution ) ){
		$contribution = $contribution[ 'values' ][ $contrib_id ];
	}
	$contact = civicrm_api("Contact","get", array (
		'version' =>'3',
		'contact_id' => $contribution[ 'contact_id' ],
		'return' => "display_name,first_name,last_name,email,preferred_language"
	));
	if( is_array( $contact ) ){
		$contact = $contact[ 'values' ][ $contribution[ 'contact_id' ] ];
	}
	
	# attempt to get localizations
	$locale = $contact['preferred_language'];
	$lang = substr($locale, 0, 2);
	if ( !isset( $lang ) or $lang == '') {
		$lang = "en";
	}

	# set the default page text to failed
	$page = <<<EOT
<h2 class="visible">{{thank_you_unsubscribe_title}}</h2>
<div id="logo"></div>
<div id="unsub-body">
	<p id="unsub-text">{{thank_you_unsubscribe_fail}}</p>
</div>
EOT;

	# check the hash to confirm this is a valid unsubscription
	$hash_match = sha1( $contribution_id . $contribution[ 'contact_id' ] . $contribution[ 'trxn_id' ] ) == $hash_get;
	# check to see if the user submitted the form
	if( isset( $_POST ) and !empty( $_POST ) ){
		$success = false;
		if( $hash_match ){
			# process the unsubscription
			$contact = civicrm_api("Contact","update", array (
				'version' =>'3',
				'id' => $contribution[ 'contact_id' ],
				'is_opt_out' => 1,
			));
			$success = $contact[ 'is_error' ] == 0 and $contact[ 'values' ][ 'is_opt_out' ] == 1;
		}
		if( $success ){
			$page = <<<EOT
<h2 class="visible">{{thank_you_unsubscribe_title}}</h2>
<div id="logo"></div>
<div id="unsub-body">
	<p id="unsub-text">{{thank_you_unsubscribe_success}}</p>
	<p id="unsub-warning">{{thank_you_unsubscribe_delay}}</p>
</div>
EOT;
		}
	} else if( $hash_match ){ # display the opt-out form
		$page = <<<EOT
<h2 class="visible">{{thank_you_unsubscribe_title}}</h2>
<div id="logo"></div>
<div id="unsub-body">
	<p id="unsub-text">{{thank_you_unsubscribe_confirm}}</p>
	<p id="unsub-warning">{{thank_you_unsubscribe_warning}}</p>
	<br />
	<form id="unsub" method="post">
		<input type="hidden" name="h" value="$hash_get">
		<input type="hidden" name="c" value="$contrib_id">
		<input type="submit" value="{{thank_you_unsubscribe_button}}">
	</form>
</div>
EOT;
	} else {
		# do nothing, show the fail page
	}
	# check to see if a matching localization was found
	if ( isset( $messages ) and array_key_exists( $lang, $messages ) ) {
		# loop through the localizations and replace the defaults
		foreach ( $messages[ $lang ] as $key => $value ){
			$page = str_replace( "{{" . $key . "}}", "$value", $page );
		}
	}
	else{
		# do nothing, default to en
	}
	# replace any contact tokens
	foreach ( $contact as $key => $value ) {
		$page = str_replace( '{contact.' . $key . '}', $value, $page );
	}
	return $page;
}


<?php

function exchange_rates_menu() {
  $items = array();
  
  $items['exchange_rates'] = array(
    'title' => t('Exchange rates'),
    'page callback' => 'exchange_rates_listing',
    'access arguments' => array('administer site configuration'),
  );
  $items['exchange_rates/update'] = array(
    'title' => t('Update exchange rates'),
    'page callback' => 'exchange_rates_manual_update',
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

function exchange_rates_get_currencies() {
  static $currencies = array();
  if (empty($currencies)) {
    $currencies = array();
    $res = db_query('SELECT currency FROM {exchange_rates} GROUP BY currency ORDER BY currency');
    while ($row = db_fetch_object($res)) {
      $currencies[$row->currency] = $row->currency;
    }
  }
  return $currencies;
}

function exchange_rates_manual_update() {
  exchange_rates_cron();
  drupal_set_message(t('Exchange rates updated'));
  drupal_goto('exchange_rates');
}

function exchange_rates_listing() {
  $cols = array(
    t('Currency'),
    t('Value in USD'),
  );
  $rows = array();

  $currencies = db_query('SELECT currency FROM {exchange_rates} GROUP BY currency ORDER BY currency');
  while ($currency = db_fetch_object($currencies)) {
    $rows[] = array(
      $currency->currency,
      exchange_rate_convert($currency->currency),
    );
  }
  
  $content[] = t('Last updated: %updated', array('%updated' => format_date(variable_get('exchange_rates_bank_update', 0))));
  $content[] = theme('table', $cols, $rows);
  
  return implode("\n", $content);
}

function exchange_rate_convert($from_currency, $amount = 1, $timestamp = NULL) {
  if (!$timestamp) {
    $timestamp = time();
  }

  $amount = str_replace(',', '', $amount);
  $rate = db_result(db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = "%s" AND bank_update <= %d ORDER BY bank_update DESC', $from_currency, $timestamp, 0, 1));

  // If a rate can't be found, use the oldest one on file.
  if (!$rate) {
    $rate = db_result(db_query_range('SELECT value_in_usd FROM {exchange_rates} WHERE currency = "%s" ORDER BY bank_update', $from_currency, 0, 1));
  }
  
  if (!$rate) {
    throw new Exception(t("No conversion available for currency !cur", array("!cur" => $from_currency)));
  }

  return $amount * $rate;  
}

function exchange_rates_cron() {

	// If you update this list, also update the list in the DonationInterface extension
	$currencies = array(
		'AED', // UAE dirham
		'ARS', // Argentinian peso
		'AUD', // Australian dollar
		'BBD', // Barbadian dollar
		'BDT', // Bagladesh taka
		'BGN', // Bulgarian lev
		'BHD', // Bahraini dinar
		'BMD', // Bermudian dollar
		'BND', // Brunei dollar
		'BOB', // Bolivia boliviano
		'BRL', // Brazilian real
		'BSD', // Bahamian dollar
		'BZD', // Belize dollar
		'CAD', // Canadian dollar
		'CHF', // Swiss franc
		'CLP', // Chilean deso
		'CNY', // Chinese yuan renminbi
		'COP', // Colombia columb
		'CRC', // Costa Rican colon
		'CZK', // Czech koruna
		'DKK', // Danish krone
		'DOP', // Dominican peso
		'DZD', // Algerian dinar
		'EEK', // Estonian kroon
		'EGP', // Egyptian pound
		'EUR', // Euro
		'GBP', // British pound
		'GTQ', // Guatemala quetzal
		'HKD', // Hong Kong dollar
		'HNL', // Honduras lempira
		'HRK', // Croatian kuna
		'HUF', // Hungarian forint
		'IDR', // Indonesian rupiah
		'ILS', // Israeli shekel
		'INR', // Indian rupee
		'JMD', // Jamaican dollar
		'JOD', // Jordanian dinar
		'JPY', // Japanese yen
		'KES', // Kenyan shilling
		'KRW', // South Korean won
		'KYD', // Cayman Islands dollar
		'KZT', // Kazakhstani tenge
		'LBP', // Lebanese pound
		'LKR', // Sri Lankan rupee
		'LTL', // Lithuanian litas
		'LVL', // Latvian lats
		'MAD', // Moroccan dirham
		'MKD', // Macedonia denar
		'MUR', // Mauritius rupee
		'MVR', // Maldives rufiyaa
		'MXN', // Mexican peso
		'MYR', // Malaysian ringgit
		'NOK', // Norwegian krone
		'NZD', // New Zealand dollar
		'OMR', // Omani rial
		'PAB', // Panamanian balboa
		'PEN', // Peru nuevo sol
		'PHP', // Philippine peso
		'PKR', // Pakistani rupee
		'PLN', // Polish złoty
		'PYG', // Paraguayan guaraní
		'QAR', // Qatari rial
		'RON', // Romanian leu
		'RUB', // Russian ruble
		'SAR', // Saudi riyal
		'SEK', // Swedish krona
		'SGD', // Singapore dollar
		'SVC', // Salvadoran colón
		'THB', // Thai baht
		'TJS', // Tajikistani Somoni
		'TND', // Tunisan dinar
		'TRY', // Turkish lira
		'TTD', // Trinidad and Tobago dollar
		'TWD', // New Taiwan dollar
		'UAH', // Ukrainian hryvnia
		'UYU', // Uruguayan peso
		'USD', // U.S. dollar
		'UZS', // Uzbekistani som
		'VND', // Vietnamese dong
		'XAF', // Central African CFA franc
		'XCD', // East Caribbean dollar
		'XOF', // West African CFA franc
		'ZAR', // South African rand
	);
	$currencyCount = count( $currencies );
	
	// Construct the URL for the API call
	$currencyList = implode( '_', $currencies );
	$url = 'https://www.oanda.com/cgi-bin/fxml/fxml?fxmlrequest=%3Cconvert%3E%3Cclient_id%3E';
	$url .= 'WikimediaFoundation';
	$url .= '%3C/client_id%3E%3Cexpr%3EUSD%3C/expr%3E%3Cexch%3E';
	$url .= $currencyList;
	$url .= '%3C/exch%3E%3C/convert%3E';
	
	// Retrieve and parse the XML results
	$request = drupal_http_request( $url );
	$xml = $request->data;
	$p = xml_parser_create();
	$parseSuccess = xml_parse_into_struct( $p, $xml, $results, $index );
	xml_parser_free( $p );
	
	if ( $parseSuccess ) { // make sure parsing the XML was successful before proceeding
		//date_default_timezone_set( 'America/Los_Angeles' );
		$datetime = '';
		if ( isset( $results[$index['DATE'][0]]['value'] ) ) {
			$datetime = $results[$index['DATE'][0]]['value']; // get datatime from XML
		}
		$bankUpdateTimestamp = strtotime( $datetime ); // the bank's timestamp for the rate
		variable_set( 'exchange_rates_bank_update', $bankUpdateTimestamp ); // set as persistent drupal var
		
		// For each currency, get the values from the XML and update the table
		for ( $x = 0; $x < $currencyCount; $x++ ) {
			$currency = $results[$index['EXCH'][$x]]['value']; // the currency code
			$valueInUsd = $results[$index['BID'][$x]]['value']; // the value of 1 $currency in US dollars
			exchange_rates_update_rate( $currency, $valueInUsd, $bankUpdateTimestamp ); // update the table
		}
	} else {
		// Use our back-up XML source. This will only set the rate for the most common currencies.
		$url = 'http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml';
		
		// Retrieve and parse the XML results
		$request = drupal_http_request( $url );
		$xml = $request->data;
		$p = xml_parser_create();
		xml_parse_into_struct( $p, $xml, $results, $index );
		xml_parser_free( $p );
		
		// Get date and base USD rate
		$usdBase = 0;
		$date = '';
		foreach ( $index['CUBE'] as $valIndex ) {
			$current = $results[$valIndex];
			if ( $current['attributes']['CURRENCY'] == 'USD' && isset( $current['attributes']['RATE'] ) ) {
				$usdBase = $current['attributes']['RATE'];
			}
			if ( isset( $current['attributes']['TIME'] ) ) {
				$date = $current['attributes']['TIME'];
			}
		}
		$bankUpdateTimestamp = strtotime( $date . ' 00:00:00 GMT' );
		variable_set( 'exchange_rates_bank_update', $bankUpdateTimestamp );
	  
		// Table is based on EUR, so must insert manually
		exchange_rates_update_rate( 'EUR', $usdBase, $bankUpdateTimestamp );
	  
		// Calculate and insert remaining rates
		foreach ( $index['CUBE'] as $valIndex ) {
			$current = $results[$valIndex];
			if ( isset( $current['attributes']['CURRENCY'] ) && isset( $current['attributes']['RATE'] ) ) {
				exchange_rates_update_rate(
					$current['attributes']['CURRENCY'], 
					$usdBase / $current['attributes']['RATE'], 
					$bankUpdateTimestamp
				);
			}
		}
		
	}
	
}

function exchange_rates_update_rate($currency, $value_in_usd, $bank_update) {
  @db_query('INSERT INTO {exchange_rates} (currency, value_in_usd, bank_update, local_update) VALUES ("%s", %f, %d, %d)', $currency, $value_in_usd, $bank_update, time());
}

<?php

function public_reporting_perm() {
    return array( 'administer wmf public reporting' );
}

function public_reporting_menu() {
  $items = array();

  $items['admin/config/public_reporting'] = array(
    'title' => t('Public Reporting'),
    'description' => t('Public reporting table'), 
    'access arguments' => array('administer wmf public reporting'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('public_reporting_form'),
  );

  return $items;
}

function public_reporting_form() {
  $form = array();

  $form['submit1'] = array(
    '#value' => 'Synchronize',
    '#type' => 'submit'
  );

  return $form;
}

function public_reporting_form_submit($form, &$form_state) {

	$result = public_reporting_execute_sql_file( 'synchronize.sql' );

	if ($result === true){
		$message = "Synchronize SQL Executed successfully.";
		$severity = WATCHDOG_NOTICE;
		$status = 'status';
	} else {
		$message = "Synchronize SQL failed!";
		$severity = WATCHDOG_ERROR;
		$status = 'error';
	}

	watchdog("public_reporting", $message, array(), $severity);
	drupal_set_message($message, $status);
	//TODO: Does the drupal_set_message function get all the way back to the
	//original page? Or do I have to send a success message back a third way?
	//(probably)
}

/**
 * Takes a .sql source file, and turns it into an array of discrete SQL
 * statements that Drupal is capable of handling individually.
 * @param string $file Full path to the .sql source file.
 * @return array The contents of the .sql source file, all pulled apart into
 * queries that drupal may execute discretely.
 */
function public_reporting_sql_file_to_array($file){

	$discrete_queries = array();

	$handle = fopen($file, "r");
	$query = "";
	$ok = true; //turn this false for the rest of the process if anything goes wrong.
	$commentblock = false;
	$group = false;
	$delimiter = false;

	while(!feof($handle)){
		$query .= fgets($handle);
		//drupal_set_message($query, 'status');

		if (strpos($query, "/*") !== false){
			//TODO: This should probably check that it's at the start of the
			//line, and split the string up or whatever, but it seems like the
			//opening of a rabbit-hole to me. Seems more efficient to just not
			//do those sorts of things in the sql script for now.
			//TODO: Also, this should handle the case where the comment start
			//and end are on the same line.
			$commentblock = true;
		}

		if (strpos($query, "*/") !== false){
			//TODO: This should set $query to whatever is left after the comment
			//end. Probably. For now, let's just not do that in the .sql file.
			$commentblock = false;
			$query = '';
		}

		if (strpos($query, "--") !== false){
			$query = trim(substr($query, 0, strpos($query, "--"))) . "\n";
			//DO NOT continue here: There may have been useful bits added on
			//this line before the comment part. Handle as usual.
		}

		if (strpos($query, "DELIMITER") !== false){
			$delimiter = trim(substr($query, strpos($query, "DELIMITER")+9));
			if ($delimiter == ';' || $delimiter == ''){
				$delimiter = false;
				$group = false;
			} else {
				$group = true;
			}
			$query = '';
			continue;
		}

		if($group && (strpos($query, $delimiter) !== false)){
			//We're in a block, and we've hit a delimiter. Complete Query.
			$query = str_replace($delimiter, '', $query);
			$discrete_queries[] = trim($query);
			$query = '';
			continue;
		}

		if (!$group && strpos($query, ";") !== false && !$commentblock){
			//We've got a complete query.
			$discrete_queries[] = trim($query);
			$query = '';
		}

	}
	fclose($handle);
	if (trim($query) !== ''){
		watchdog("public_reporting_sql_file_to_array", "Un-executed Query Bits! Bits: '$query'", array(), WATCHDOG_ERROR);
	}
	return $discrete_queries;
}

/**
 * A mechanism for executing sql files through Drupal's db_query function
 * @param string $file Name of the .sql source file.
 * @return boolean true if everything returned OK, otherwise false.
 *
 * TODO: make the return value compatible with update_sql
 */
function public_reporting_execute_sql_file($file){
	$path = drupal_get_path( 'module', 'public_reporting' ) . '/../../bin/public_reporting';
	$file = "$path/$file";

	$queries = public_reporting_sql_file_to_array($file);
	$results = "";
	$expected = count($queries);
	$actual = 0;
	$ok = true;

	$dbs = wmf_civicrm_get_dbs();
	$dbs->push( 'civicrm' );

	foreach($queries as $query){
		$queryResult =  db_query($query);
		if (!$queryResult){
			$ok = false;
			drupal_set_message( t( "Query failed.  Please attempt manually: \n%sql", array( '%sql' => $query ) ) );
		} else {
			$results .= "\n$query\nResult: " . print_r($queryResult, true);
		}
		++$actual;
	}

	$dbs->pop();

	watchdog("public_reporting_execute_sql_file", "DB Queries Completed: $actual / $expected (File: $file)");
	watchdog("public_reporting_execute_sql_file", "Results: $results");
	return $ok;
}

function public_reporting_rebuild_aggregations( $options ) {
    public_reporting_execute_sql_file( 'rebuild-aggregations.sql' );
}

function public_reporting_update_aggregations( $options ) {
    public_reporting_execute_sql_file( 'update-aggregations.sql' );
}

<?php
// include common functions
require_once( drupal_get_path( 'module', 'recurring_globalcollect' ) . '/recurring_globalcollect_common.inc' );

/**
 * Implementation of hook_menu().
 */
function recurring_globalcollect_menu() {
  $items = array();
  
  $items['admin/settings/recurring_globalcollect'] = array(
    'title' => 'Recurring GlobalCollect Processor',
    'description' => t('Configure message queue interface.'),
    'access arguments' => array('administer recurring_globalcollect'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recurring_globalcollect_settings'),
  );

  $items['admin/settings/recurring_globalcollect/configure'] = array(
    'title' => 'Configure',
    'access arguments' => array('administer recurring_globalcollect'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/recurring_globalcollect/search'] = array(
    'title' => 'Search',
    'access arguments' => array('administer recurring_globalcollect'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recurring_globalcollect_search_by_order_id_form'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/recurring_globalcollect/test'] = array(
    'title' => 'Test',
    'access arguments' => array('administer recurring_globalcollect'),
    'page callback' => 'recurring_globalcollect_test',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['recurring_globalcollect'] = array(
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'recurring_globalcollect_batch_process',
  );
  
  return $items;
}

function recurring_globalcollect_test() {

  $return = 'No testing available at this time.';
  return $return;
}
/**
 * Implementation of hook_perm().
 */
function recurring_globalcollect_perm() {
  return array('administer recurring_globalcollect');
}

/**
 * Callback for menu path "admin/settings/recurring_globalcollect".
 */
function recurring_globalcollect_settings() {
  $form = array();

  $defaultTestUrl = buildDefaultTestUrl();
  
  $form[ 'recurring_globalcollect' ][ 'globalcollect_url' ] = array(
    '#maxlength' => 255,
    '#type' => 'textfield',
    '#title' => t('Global Collect Url'),
    '#required' => FALSE,
    '#default_value' => variable_get('globalcollect_url', $defaultTestUrl),
    '#description' => t( 'The url to the Global Collect Gateway.' ),
  );

  $form[ 'recurring_globalcollect' ][ 'localhost_test_url' ] = array(
    '#maxlength' => 255,
    '#type' => 'textfield',
    '#title' => t('Default Testing Url'),
    '#required' => FALSE,
    '#default_value' => variable_get('localhost_test_url', $defaultTestUrl),
    '#description' => t( 'The url to the local server to test the connection. This should point to your CiviCRM host.' ),
  );
  
  // Get the path of the file to make sure it is installed.
  $standalone_globalcollect_adapter_path = variable_get('standalone_globalcollect_adapter_path', drupal_get_path('module', 'recurring_globalcollect') . '/library/StandaloneGlobalCollectAdapter.php');

  // Flag to tell the user to install the library
  $standalone_globalcollect_adapter_installed = is_file( $standalone_globalcollect_adapter_path ) ? '<span style="color:green;">Installed</span>' : '<span style="color:red;">Please install</span>';

  $form['standalone_globalcollect_adapter_path'] = array(
    '#type' => 'textfield',
    '#title' => t('StandaloneGlobalCollectAdapter Path'),
    '#required' => TRUE,
    '#default_value' => $standalone_globalcollect_adapter_path,
    '#description' => t($standalone_globalcollect_adapter_installed . ' Link: ') . l(t('Current version of the StandaloneGlobalCollectAdapter library' ), "http://svn.wikimedia.org/viewvc/wikimedia/trunk/fundraising-misc/standalone/StandaloneGlobalCollectAdapter/StandaloneGlobalCollectAdapter.php?view=markup"),
  );

  $form['recurring_globalcollect_failmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Notification Address'),
    '#required' => FALSE,
    '#default_value' => variable_get('recurring_globalcollect_failmail', ''),
    '#description' => t('Enter the fail mail contact address.'),
  );

  $form['recurring_globalcollect_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Global Collect Merchant ID'),
    '#required' => FALSE,
    '#default_value' => variable_get('recurring_globalcollect_merchant_id', 0),
  );

  $form['recurring_globalcollect_failure_retry_rate'] = array(
    '#type' => 'textfield',
    '#title' => t('Failure retry rate'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_failure_retry_rate', 1),
    '#description' => t('Enter the number of days to wait until retry.'),
  );

  $form['recurring_globalcollect_failures_before_cancellation'] = array(
    '#type' => 'textfield',
    '#title' => t('Failures before subscription is cancelled'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_failures_before_cancellation', 3),
    '#description' => t('Enter the number of attempts to wait until the subscription is cancelled..'),
  );

  $form['recurring_globalcollect_run_missed_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Catch up missed days'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_run_missed_days', 3),
    '#description' => t('Enter the number of days in the past to start batching payments that were missed in the past X days.'),
  );

  $form['recurring_globalcollect_batch_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of payments to batch'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_batch_max', 0),
    '#description' => t('The maximum batch size cannot be overridden from drush.'),
  );

  $form['recurring_globalcollect_batch'] = array(
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_globalcollect_batch', 0),
    '#description' => t('This may be overridden with: `drush rg --batch=10`'),
    '#options' => array(
      0 => 0,
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
    ),
  );
  
  return system_settings_form($form);
}

/**
 * recurring_globalcollect_batch_process
 * 
 * @param array $options 
 * - $options['batch'] The number of contributions to process. If empty, this defaults to recurring_globalcollect_batch.
 * - $options['date'] @uses strtotime()
 * - $options['process'] next_sched_contribution | failure_retry_date
 * - $options['url'] Used for testing and overriding the url
 */
function recurring_globalcollect_batch_process($options = array()) {

  // The number of contributions to process
  $batch = (integer) variable_get('recurring_globalcollect_batch', 0);
  $batch_max = (integer) variable_get('recurring_globalcollect_batch_max', 0);
  
  // Make sure batch is an integer.
  if (isset($options['batch'])) {
  	$batch = (integer) $options['batch'];
  	unset($options['batch']);
  }

  if ($batch > $batch_max) {
  	
  	$message = 'You are attempting to batch ' . $batch .' payments, which is'
  	           . ' more than the maximum allowed: ' . $batch_max .'. Either'
  	           . ' batch less payments or increase the maximum.';
  	$link = l('Edit recurring GlobalCollect settings', 'admin/settings/recurring_globalcollect');
    watchdog('recurring_globalcollect', $message, array(), WATCHDOG_ERROR, $link);
    drush_set_error('BATCHING', dt($message));
  	return false;         
  }
  
  $processed = 0;
  
  watchdog('recurring_globalcollect', 'Attempting to process up to ' . $batch . ' recurring contribution(s).');

  // Attempt to process items for the batch
  for ($i = 0; $i < $batch; ++$i) {
    $success = recurring_globalcollect_process($options);
    if ($success) {
      ++$processed;
    } else {
      break;
    }
  }

  // allow for other modules to handle their own related batch processing
  //$batchprocessed = module_invoke_all( 'recurring_globalcollect_batch_process');
  //$processed += array_sum($batchprocessed);
  
  if ($processed > 0) {
    watchdog('recurring_globalcollect', 'Successfully processed ' . $processed . ' contribution(s).');
  }
  else {
    watchdog('recurring_globalcollect', 'No contributions processed.');
  }
}

/**
 * Remove one item from the queue and process it.
 *
 * @param  array  $options
 *
 * $options:
 * - string  $date The date to process.
 * - string $process There are two types of payments to process: next_sched_contribution and failure_retry_date.
 *
 * You are not allowed to process future dates. This generates an error
 *
 * $options['date'] @uses strtotime()
 *
 * The default date to process is today.
 *
 * The default process is next_sched_contribution.
 *
 * If you pick an incorrect process, an error will be generated.
 *
 * @uses recurring_globalcollect_process_error()
 * @uses recurring_globalcollect_process_validate_options()
 *
 * @return  boolean  Returns false on error. Returns true if contributions were processed. Returns false if no contributions are ready to be processed.
 */
function recurring_globalcollect_process($options = array()) {
  
  /**
   * @var boolean $return The return value
   */
  $return = false;

  /**
   * @var array $query_options Options to pass to the query
   */
  $query_options = recurring_globalcollect_process_get_query_options($options);
  
  // Check to see if there were any problems with options
  if (!is_array($query_options)) {
    return false;
  }
  
  try {

    $result = recurring_globalcollect_get($query_options);
  
    // Check to see if any contributions were found
    if (empty($result)) {
      watchdog('recurring_globalcollect', 'No contributions are ready to be processed.');
      $return = false;
    }
    else {
  
      $status = recurring_globalcollect_connect($result, $options);

      // If $status is false, see what went wrong
      if ($status) {
        $return = true;
      }
      else {
      	// There was a problem, process the error.
	    recurring_globalcollect_process_error();
      }
	}
  }
  catch (Exception $e) {
  	$message = 'Unable to process payment: ' . $e->getMessage();
    watchdog('recurring_globalcollect', $message, array(), WATCHDOG_ERROR);
    drush_set_error('UNKNOWN', dt($message));
    return false;
  }  

  return $return;
}

/**
 * Process the error
 *
 * @todo Any errors found in this method should not mark the contribution as a failure.
 */
function recurring_globalcollect_process_error() {
  
  /**
   * @var array $top_error The top error in the stack
   */
  $top_error = _recurring_globalcollect_get_top_new_drush_error();
  
  /**
   * @var string $err_code The error code
   */
  $err_code = isset($top_error['err_code']) ? $top_error['err_code'] : 'UNKNOWN';
  
  /**
   * @var string $err_text The error message
   */
  $err_text = isset($top_error['err_text']) ? $top_error['err_text'] : 'An error occured, but no error was generated at the incident.';
  
  /**
   * @var string $watchdog_link The watchdog operations link
   */
  $watchdog_link = '';
  
  /**
   * @var string $watchdog_message The watchdog error message
   */
  $watchdog_message = $err_code . ': ' . $err_text;
  
  /**
   * @var integer $watchdog_severity The watchdog error severity
   */
  $watchdog_severity = WATCHDOG_ERROR;
  
  /**
   * @var string $watchdog_type The watchdog error type
   */
  $watchdog_type = 'recurring_globalcollect';
  
  // Decide what to do with error.
  switch ($err_code){
    
    /**
     * BATCHING
     *
     * There was a problem with the batch size you are attempting.
     *
     * You can alter these settings in the admin panel:
     * @link /?q=admin/settings/recurring_globalcollect
     *
     * This should not mark the payment as a failure
     */
    case 'BATCHING':
   	  $watchdog_link = l('Edit recurring GlobalCollect settings', 'admin/settings/recurring_globalcollect');
      break;
    
    /**
     * CIVI_CONFIG
     *
     * Check your CiviCRM configuration
     */
    case 'CIVI_CONFIG':
      break;
    
    /**
     * RG
     *
     * There is a problem with recurring_globalcollect
     */
    case 'RG':
      break;
    
    /**
     * RG_SETTINGS
     *
     * There is a problem with recurring_globalcollect settings
     */
    case 'RG_SETTINGS':
      break;
    
    /**
     * FUTURE_DATE
     *
     * Dates must not be in the future
     */
    case 'FUTURE_DATE':
      break;
    
    /**
     * GLOBALCOLLECT
     *
     * Something went wrong with the payment gateway.
     *
     * At this point, it is unknown what happended with the current transaction
     *
     * @todo This should not mark the payment as a failure
     */
    case 'GLOBALCOLLECT':
      break;
    
    /**
     * CIVI_INSERT
     *
     * Something went wrong inserting a record of the completed contribution 
	 * into civi
     *
     * @todo This should not mark the payment as a failure, as it has 
	 * successfully gone through once already. Precautions should be taken to 
	 * make sure the transaction is marked as such, so the donor is not 
	 * overcharged.
     */
    case 'CIVI_INSERT':
		break;
    
    /**
     * UNKNOWN
     *
     * Unhandled error
     *
     * @todo This should not mark the payment as a failure
     */
    default:
      throw new Exception($watchdog_message);
  }

  watchdog($watchdog_type, $watchdog_message, array(), $watchdog_severity, $watchdog_link);
  recurring_globalcollect_failmail($top_error, array());
}

/**
 * Get the query options for @see recurring_globalcollect_process()
 *
 * @return  array  Returns an array of options for @see _recurring_globalcollect_get_next_sched_contribution() and @see _recurring_globalcollect_get_failure_retry_date()
 */
function recurring_globalcollect_process_get_query_options($options = array()) {
  
  /**
   *  @var  array  $query_options  Options to pass to the query
   */
  $query_options = array();
   
  $date = isset( $options['date'] ) ? $options['date'] : '';
  $query_options['process'] = isset( $options['process'] ) ? $options['process'] : 'next_sched_contribution';
  
  if (!empty($date)) {
    $now_stamp = time();
    $now = date('Y-m-d', $now_stamp);
    $date_stamp = strtotime($date);
    
    // Reparse date
    $date_reparsed = date('Y-m-d', $date_stamp);
    
    if ($date_stamp > $now_stamp) {
      $message = 'The date you entered [' . $date . '] is being parsed as [' . $date_reparsed . ']. The current date is: [' . $now . ']. You are not allowed to specify dates in the future.';
      drush_set_error('FUTURE_DATE', dt($message));
      return false;
    }
    
    $query_options['date'] = $date_reparsed;
  }
  
  // $allowed_processes is used for dumping available processes if an invalid
  // process is specified.
  
  return $query_options;
}

/**
 * Connect to GlobalCollect with the StandaloneGlobalCollectAdapter
 *
 * @param object|array $result 
 */
function recurring_globalcollect_connect($result, $options = array()){
  if (is_object($result)) {
    $result = (array) $result;
  }

  $adapterOptions = array();
  
  // Set the merchant ID
  $adapterOptions['merchantId'] = variable_get('recurring_globalcollect_merchant_id', 0);
  
  $IPADDRESS = isset($result['IPADDRESS']) ? $result['IPADDRESS'] : '';
  
  $IPADDRESS = (empty($IPADDRESS) && isset($_SERVER['SERVER_ADDR'])) ? $_SERVER['SERVER_ADDR'] : ''; 
  
  if (empty($IPADDRESS)) {
    $IPADDRESS = '127.0.0.1';
    $message = 'You must specify a valid IPA.';
    //throw new Exception($message);
  }
  
  // Parse ORDERID
  if ( preg_match('/RECURRING GLOBALCOLLECT (?P<ORDERID>\w+)/', $result['trxn_id'], $matches) ) {
  	
  	$ORDERID = $matches['ORDERID'];
  }
  else {
    $message = 'ORDERID was not found in the trxn_id: ' . print_r($result, true);
    watchdog('recurring_globalcollect', $message, null, WATCHDOG_ERROR);
    drush_set_error('RG', $message);
    return false;
  }
   
  // Increment the EFFORTID
  $values = array(
      'EFFORTID' => $result['processor_id'] + 1,
      'ORDERID' => $ORDERID,
      'IPADDRESS' => $IPADDRESS,
  );

  // Set the URL for the adapter
  if (isset($options['url'])) {
    $adapterOptions['url'] = $options['url'];
  }
  else {
    $adapterOptions['url'] = variable_get('globalcollect_url', '');
  }

  // $values and $options are used for testing.
  $adapterOptions['url'] = recurring_globalcollect_build_url($values, $adapterOptions);
   
  $instance = StandaloneGlobalCollectAdapter::getInstance( $adapterOptions );

  watchdog('recurring_globalcollect', 'Processing payment: <pre>' . print_r($result, true) . '</pre>');

  $instance->setValues( $values );
  
  try {
  	_recurring_globalcollect_update_record_in_progress($result['id']);
  	
    $status = $instance->curlTransaction();

    watchdog('recurring_globalcollect', 'Sending [successful] request: <pre>' . htmlentities($instance->getRequestDoPayment()) . '</pre>');
    
    if ($status) {
      watchdog('recurring_globalcollect', 'Receiving response [successful]: <pre>' . htmlentities($instance->getResponse()) . '</pre>');
    }
    else {
      watchdog('recurring_globalcollect', 'Receiving response [failure]: <pre>' . htmlentities($instance->getResponse()) . '</pre>', null, WATCHDOG_ERROR);
    }

    $errors = $instance->getResponseErrors();
    
    // If success, add a record to the contribution table and send a thank you email.
    if ($status && empty($errors)) {
      
      $contact = array(
          'id' => $result['contact_id'],
      );
      
      $msg = array();
      $msg['fee'] = 0.00;
      
      $msg['gateway'] = 'globalcollect';
      $msg['gross'] = $result['amount'];
      $msg['net'] = $msg['gross'] - $msg['fee'];
      //$msg['contribution_id'] = $result['contribution_id'];
      $msg['gateway_txn_id'] = $result['trxn_id'];
      $msg['payment_method'] = 'cc';
      $msg['payment_submethod'] = '';
      $msg['date'] = time();
      $msg['original_currency'] = $result['currency'];
      $msg['original_gross'] = $msg['gross'];
      /*
       * This array needs to be rekeyed to be consistent with:
       *
       * @see thank_you_queue2civicrm_import
       *
       * id -> contribution_id
       *
       * @var array $contribution
       */
      $contribution = _queue2civicrm_contribution_insert($msg, $contact, $result['id'], $values['EFFORTID']);
      $contribution['contribution_id'] = $contribution['id'];
      unset( $contribution['id'] );
      
      // Send thank you email, other post-import things
	  if ( $contribution ){
	      module_invoke_all( 'recurring_globalcollect', $contribution );
	  } else {
		  $message = "Contribution could not be added to civicrm, for the following message: " . print_r( $msg, true);
		  watchdog('recurring_globalcollect', $message, null, WATCHDOG_ERROR);
		  drush_set_error("CIVI_INSERT", $message, true);
	  }
   
	  $affected_rows = _recurring_globalcollect_update_record_success($result['id']);
    }
    else {
     
      $affected_rows = _recurring_globalcollect_update_record_failure($result['id']);
      watchdog('recurring_globalcollect', 'Update row for failure: rows updated [' . $affected_rows . ']. Errors: ' . print_r($errors, true));
   }
    
    if (empty( $affected_rows)) {
      watchdog('recurring_globalcollect', 'Rows updated [' . $affected_rows . '].', null, WATCHDOG_ERROR);
    }
    elseif ($affected_rows == 1) {
      watchdog('recurring_globalcollect', 'Rows updated [' . $affected_rows . '].');
    }
    else {
      watchdog('recurring_globalcollect', 'Rows updated [' . $affected_rows . ']. Only one row should be updated at a time.', null, WATCHDOG_ERROR);
    }
    
    return $status;
  }
  catch (StandaloneGlobalCollectAdapter_Exception $e) {

    watchdog('recurring_globalcollect', $e->getMessage(), null, WATCHDOG_ERROR);
    drush_set_error("GLOBALCOLLECT", "Global Collect error:" . print_r($e->getMessage(), true));

    return false;
  }  
  catch (Exception $e) {

    watchdog('recurring_globalcollect', $e->getMessage(), null, WATCHDOG_ERROR);
    drush_set_error("GLOBALCOLLECT", "Global Collect error:" . print_r($e->getMessage(), true));
    
    return false;
  }  
}

/**
 * recurring_globalcollect_build_url
 *
 *
 * @param type $options
 * @return string; 
 */
function recurring_globalcollect_build_url($values, $options) {
    
  $url = isset($options['url']) ? $options['url'] : '';

  // Fix case where boolean values are strings
  if ( $url == 'true') {
      $url = true;
  }
  elseif ( $url == 'false') {
      $url = false;
  }
  
  //$url = false;
  $returnUrl = variable_get('globalcollect_url', '');

  if (is_bool($url)) {

    $returnUrl  = variable_get('localhost_test_url', '');
    $returnUrl .= (substr($returnUrl, -1) == '/') ? '' : '/';
    $returnUrl .= 'sites/all/modules/recurring_globalcollect/tests/resources/responses/';
    // Fail should go to a global collect example failure. A 404 will do for now.

    if ($url) {
      $returnUrl .=  'curlTransaction.valid.response.php?';
      $returnUrl .=  '&ORDERID=' . $values['ORDERID'];
      $returnUrl .=  '&EFFORTID=' . $values['EFFORTID'];
      $returnUrl .=  '&IPADDRESS=' . $values['IPADDRESS'];
    }
    else {
      $returnUrl .= '404.php';
    }
  }
  elseif (is_numeric($url)) {

    $returnUrl  = variable_get('localhost_test_url', '');
    $returnUrl .= (substr($returnUrl, -1) == '/') ? '' : '/';
    $returnUrl .= 'sites/all/modules/recurring_globalcollect/tests/resources/responses/';

    $returnUrl .= $url . '.php';
  }
  elseif (!empty($url)) {

    if (substr($url, 0, 4) == 'http') {
      
      // Setting a full url
      $returnUrl = $url;
    }
    else {
      $returnUrl  = variable_get('localhost_test_url', '');
      $returnUrl .= $url;
    }
      
  }

  return $returnUrl;
}

/**
 * recurring_globalcollect_failmail
 *
 * @param type $error
 * @param type $message
 */
function recurring_globalcollect_failmail($error, $message){
  $to = variable_get('recurring_globalcollect_failmail', '');
  if ($to != ''){
    $params['error'] = $error;
    $params['message'] = $message;
    
    //$params['removed'] = $removed;
    drupal_mail('recurring_globalcollect', 'fail', $to, language_default(), $params);
  } else {
    watchdog('recurring_globalcollect', 'Failmail recipient address not set up!');
  }
}

/**
 * recurring_globalcollect_mail
 * 
 * Is this being called somewhere? Is it a hook?
 * 
 * @param type $key
 * @param type $message
 * @param type $params 
 */
function recurring_globalcollect_mail($key, &$message, $params) {
  $language = $message['language'];
  switch($key) {
    case 'fail':
      if(empty($params['error'])){
        $message['subject'] = t('recurring_globalcollect Fail Mail : UNKNOWN ERROR');
        $message['body'][] = t("A payment failed for reasons unknown, while being processed in recurring_globalcollect:");
      } else {
        $message['subject'] = t('recurring_globalcollect Fail Mail');
        $message['body'][] = t("A payment generated the following error(s) while being processed in recurring_globalcollect:");
      }

      if(!empty($params['error'])){
        $message['body'][] = t("Error Code: ") . $params['error']['err_code'];
        $message['body'][] = $params['error']['err_text'];
      }
      if(!empty($params['message'])){
        $message['body'][] = "---" . t("Message") . "---";
        $message['body'][] = print_r($params['message'], true);
        $message['body'][] = "---" . t("End") . "---";
      } else {
        $message['body'][] = t("The exact message was deemed irrelevant.");
      }
      break;
  }
}

/**
 * Create the form to search for subscriptions by order id.
 */ 
function recurring_globalcollect_search_by_order_id_form() {

  $form['submit'] = array(
    '#value' => 'Search by order id',
    '#type' => 'submit'
  );
  
  $form['order_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Order id',
    '#default_value' => '',
    '#required' => TRUE
  );
  
  return $form;
}

/** 
 * Implementation of hook_form_submit
 *
 * Submits a form to search for subscriptions by order id.
 */
function recurring_globalcollect_search_by_order_id_form_submit($form, &$form_state) {
	
  $order_id = isset( $form_state['values']['order_id'] ) ? (integer) $form_state['values']['order_id'] : 0;
  
  $record = _recurring_globalcollect_get_subscription_by_order_id($order_id);
  
  if ( $record === false ) {
  
    $message = 'No results found.';
    
  } else {
    $display_name = isset( $record['display_name'] ) ? $record['display_name'] : 'Unknown donor';
    $trxn_id = isset( $record['trxn_id'] ) ? $record['trxn_id'] : '';
    $cid = isset( $record['contact_id'] ) ? $record['contact_id'] : '';
    
    // Create a link to the recurring contribution for the donor.
    $link = '<a href="?q=civicrm/contact/view&reset=1&selectedChild=contribute&cid=' . $cid . '#Contributions">' . $display_name . '</a>';
    $message = 'Found the contact [' . $link . '] for the order id [ ' . $order_id . ' ] and with the transaction id [ ' . $trxn_id . ' ]';
  }
  
  drupal_set_message($message);
}

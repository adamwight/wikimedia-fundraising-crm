<?php

require_once 'errors.inc';
require_once 'failmail.php';
require_once 'queue.php';
require_once 'WmfTransaction.php';

/**
 * Replaces tokens in a string with entries from a @class MessageFile.
 *
 * @param        $string        The string to replace tokens in
 * @param        $message_file  The file to obtain natural language messages from
 * @param string $language      The ISO-2 language code
 *
 * @return mixed                The resultant natural language string
 */
function replace_messages($string, $message_file, $language = 'en') {

  if ($message_file instanceof MessageFile) {
    // go ahead and use the provided instance
    $messages = $message_file;
  }
  else {
    $messages = new MessageFile( $message_file );
  }

  // search for messages in the source file like %message_token% and, optionally,
  // like %message_token|param1|param2%
  $matches = array();
  preg_match_all("/%([a-zA-Z0-9_-]+)(|(?:(?!%).)*)%/", $string, $matches);

  // loop through the found tokens and replace with messages, if they exist
  foreach ($matches[ 1 ] as $i => $msg_key) {
    // look for parameters passed to the message
    if (isset( $matches[ 2 ][ $i ] ) && $matches[ 2 ][ $i ] != '') {
      $m = $messages->getMsg($matches[ 1 ][ $i ], $language);
      $params = explode('|', trim($matches[ 2 ][ $i ], '|'));
      foreach ($params as $k => $value) {
        $k++; // params are 1-indexed
        $m = str_replace("\$$k", $value, $m);
      }
      $string = str_replace($matches[ 0 ][ $i ], $m, $string);
    }
    else {
      $string = str_replace($matches[ 0 ][ $i ], $messages->getMsg($matches[ 1 ][ $i ], $language), $string);
    }
  }

  return $string;
}

/**
 * Drupal hook function setting up the configuration page.
 *
 * @return array Menu entries
 */
function wmf_common_menu() {
  $items = array();

  $items[ 'admin/config/wmf_common' ] = array(
    'title'            => 'WMF Common Settings',
    'access arguments' => array( 'administer wmf_common' ),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array( 'wmf_common_settings' ),
  );

  return $items;
}

/**
 * Drupal hook for defining exported permissions for this module. Exported
 * permissions are:
 *  - 'administer wmf_common'
 *
 * @return array of exported permissions.
 */
function wmf_common_perm() {
  return array( 'administer wmf_common' );
}

/**
 * Constructs the settings page for this module. See @ref wmf_common_menu.
 *
 * @return array Of form components.
 */
function wmf_common_settings() {
  $form = array();

  $form[ 'wmf_common_failmail' ] = array(
    '#type'          => 'textfield',
    '#title'         => t('Failmail Recipient Address'),
    '#required'      => TRUE,
    '#default_value' => variable_get('wmf_common_failmail', 'fr-tech@wikimedia.org'),
    '#description'   => t('Enter the failmail contact address.'),
  );
  
  $form[ 'wmf_common_no_failmail' ] = array(
    '#type'          => 'textfield',
    '#title'         => t('Failmail Message Exceptions for Email'),
    '#required'      => TRUE,
    '#default_value' => variable_get('wmf_common_no_failmail', ''),
    '#description'   => t('Comma-delimited (no spaces) list of donor email addresses that will never trigger failmail'),
  );

  $twig_path = variable_get('wmf_common_twig_location', drupal_get_path('module', 'wmf_common') . DIRECTORY_SEPARATOR . "Twig");
  $twig_installed = file_exists(implode(DIRECTORY_SEPARATOR, array($twig_path, 'lib', 'Twig', 'Autoloader.php')));
  $twig_msg = $twig_installed ? '<span style="color:green;">Installed Correctly</span>' : '<span style="color:red;">Please install</span>';

  $form['wmf_common_twig_location'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Twig location'),
    '#default_value' => $twig_path,
    '#required'      => TRUE,
    '#description'   => "{$twig_msg} " . t('Filesystem path of the Twig library.  Try: <code>svn co http://svn.wikimedia.org/svnroot/wikimedia/vendors/twig</code>'),
  );

  $phpmailer_path = variable_get('wmf_common_phpmailer_location', drupal_get_path('module', 'wmf_common') . DIRECTORY_SEPARATOR . "PHPMailer");
  $phpmailer_installed = file_exists(implode(DIRECTORY_SEPARATOR, array($phpmailer_path, 'class.phpmailer.php')));
  $phpmailer_msg = $phpmailer_installed ? '<span style="color:green;">Installed Correctly</span>' : '<span style="color:red;">Please install.  Try: <code>https://code.google.com/a/apache-extras.org/p/phpmailer/downloads/detail?name=PHPMailer_5.2.2.tgz</code></span>';

  $form['wmf_common_phpmailer_location'] = array(
    '#type'          => 'textfield',
    '#title'         => t('PHPMailer location'),
    '#default_value' => $phpmailer_path,
    '#required'      => TRUE,
    '#description'   => "{$phpmailer_msg} " . t('Filesystem path of the PHPMailer library.'),
  );

  $di_path = variable_get('wmf_common_di_location', drupal_get_path('module', 'wmf_common') . DIRECTORY_SEPARATOR);
  $di_installed = file_exists(implode(DIRECTORY_SEPARATOR, array($di_path, 'gateway_common', 'interface.i18n.php')));
  $di_msg = $di_installed ? '<span style="color:green;">Installed Correctly</span>' : '<span style="color:red;">Please install</span>';

  $form['wmf_common_di_location'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Donation Interface location'),
    '#default_value' => $di_path,
    '#required'      => TRUE,
    '#description'   => "{$di_msg} " . t('Filesystem path to a checkout of Donation Interface.  Try: <code>git clone https://gerrit.wikimedia.org/r/p/mediawiki/extensions/DonationInterface.git</code>'),
  );

  $form['wmf_common_requeue_delay'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Requeue Delay Time'),
    '#default_value' => variable_get( 'wmf_common_requeue_delay', 20 * 60 ),
    '#required'      => TRUE,
    '#description'   => t('Seconds to wait before retrying a failed queue message.'),
  );

  $form['wmf_common_requeue_max'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Maximum Requeue Attempts'),
    '#default_value' => variable_get( 'wmf_common_requeue_max', 10 ),
    '#required'      => TRUE,
    '#description'   => t('Number of allowed message requeue attempts before the message is moved to the "badmsg" queue.'),
  );

  return system_settings_form($form);
}

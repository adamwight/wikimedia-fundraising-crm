<?php 

define( 'CONTRIBUTION_AUDIT_PAYFLOW_AUDIT_DIR', '/usr/local/src/payflow_audit/' );

/**
 * Implementation of hook_menu()
 */
function paypal_audit_menu() {
  $items = array();
  
  $items['admin/config/contribution_audit/paypal_audit'] = array(
    'title' => 'Paypal Audit',
    'description' => t('Configure paypal audit settings.'),
    'access arguments' => array('administer contribution_audit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'paypal_audit_settings' ),
  );
  
  return $items;
}

/**
 * Callback for menu
 */
function paypal_audit_settings() {
  $form[ 'paypal_audit_dir' ] = array(
    '#type' => 'textfield',
    '#title' => t( 'Path to directory containing Payflow audit scripts' ),
    '#required' => TRUE,
    '#default_value' => variable_get( 'paypal_audit_dir', CONTRIBUTION_AUDIT_PAYFLOW_AUDIT_DIR ),
  );
  return system_settings_form( $form );
}

/**
 * Implementation of hook_contribution-audit_find_missing_trxns
 * @FIXME instead of storing full data row before checking for existence of a
 * 	trxn in Civi, we should just send the trxn ID and pull the object when 
 * 	necessary.  This necessitates a change to the actual PayPal reporting
 * 	code
 * @param array $trxns
 */
function paypal_audit_contribution_audit_find_missing_trxns( $start_date, $end_date ) {
  $pp_trxns = array();
  $pf_trxns = array();
  $missing_trxns = array();
  
  // fetch trxns from paypal
  $options = array(
    'include_authorization' => 'false',
    'include_delayedcapture' => 'false',
    'include_credit' => 'false',
    'include_void' => 'false',
    'include_voiceauthorization' => 'false',
    'show_order_id' => 'false',
    'show_account_number' => 'false',
    'show_expires' => 'false',
    'show_aba_routing_number' => 'false',
    'show_result_code' => 'false',
    'show_response_msg' => 'false',
    'show_comment1' => 'false',
    'show_comment2' => 'false',
    'show_tax_amount' => 'false',
    'show_purchase_order' => 'false',
    'show_original_transaction_id' => 'false',
    'show_avs_street_match' => 'false',
    'show_avs_zip_match' => 'false',
    'show_invoice_number' => 'false',
    'show_authcode' => 'false',
    'show_batch_id' => 'false',
    'show_csc_match' => 'false',
    'show_billing_first_name' => 'false',
    'show_billing_last_name' => 'false',
    'show_billing_company_name' => 'false',
    'show_billing_address' => 'false',
    'show_billing_city' => 'false',
    'show_billing_state' => 'false',
    'show_billing_zip' => 'false',
    'show_billing_email' => 'false',
    'show_billing_country' => 'true',
    'show_shipping_first_name' => 'false',
    'show_shipping_last_name' => 'false',
    'show_shipping_address' => 'false',
    'show_shipping_city' => 'false',
    'show_shipping_state' => 'false',
    'show_shipping_zip' => 'false',
    'show_shipping_country' => 'true',
    'show_customer_code' => 'false',
    'show_freight_amount' => 'false',
    'show_duty_amount' => 'false',
    );
  $audit = new Paypal_Audit();
  $report = $audit->getCustomReport( $start_date, $end_date, $options );
  
  // find the 'tender type' and trxn id columns so we can tell paypal v payflow
  $columns = $report->getReportResponse()->findColumnNumber( array('Tender Type', 'Transaction ID', 'PayPal Transaction ID', 'Type' ));
  watchdog( 'paypal_audit', 'PayPal custom report run complete.', array(), WATCHDOG_DEBUG );
  //loop through trxns (each trxn is a reportDataRow object), isolate paypal v non-paypal
  foreach( $report->getData() as $trxn ) {
    if ( $trxn->data[ $columns[ 'Tender Type' ]] == 'PayPal' ) {
      $pp_trxns[ $trxn->data[ $columns[ 'PayPal Transaction ID' ]]] = iterator_to_array( $trxn );
    } else {
      $pf_trxns[ $trxn->data[ $columns[ 'Transaction ID' ]]] = iterator_to_array( $trxn );
    }
  }
  
  watchdog( 'paypal_audit', 'PayPal transactions present in report: @d', array('@d' => count($pp_trxns)), WATCHDOG_DEBUG );
  watchdog( 'paypal_audit', 'PayflowPro transactions present in report: @d', array('@d' => count($pf_trxns)), WATCHDOG_DEBUG );
  
  //check for missing non-paypal
  $pp_trxns_missing = paypal_audit_find_missing_pp_trxns( $pp_trxns, $columns );
  watchdog( 'paypal_audit', 'PayPal transactions missing: @d', array( '@d' => count($pp_trxns_missing)), WATCHDOG_DEBUG );
  $missing_trxns = array_merge( $missing_trxns, paypal_audit_format_trxns( $pp_trxns_missing, $report, 'PayPal' ));  
  
  //check for missing paypal
  $pf_trxns_missing = paypal_audit_find_missing_pf_trxns( $pf_trxns, $columns );
  watchdog( 'paypal_audit', 'PayflowPro transactions missing: @d', array( '@d' => count($pf_trxns_missing)), WATCHDOG_DEBUG );
  $missing_trxns = array_merge( $missing_trxns, paypal_audit_format_trxns( $pf_trxns_missing, $report ));
  
  return $missing_trxns;
}

/**
 * Find PayPal transactions not recorded in civicrm_contribution
 * @TODO refactor (look at paypal_audit_find_missin_pf_trxns)
 * @param array $pp_trxns
 * @return array Missing transactions with full trxn data row objects
 */
function paypal_audit_find_missing_pp_trxns( $pp_trxns, $columns ) {
  $missing_trxns = array();

  $dbs = wmf_civicrm_get_dbs();

  // check for matching ids - if no match, it's missing
  foreach ( array_keys( $pp_trxns ) as $pp_trxn_id ) {
    $query = "SELECT trxn_id 
    	FROM civicrm_contribution 
    	WHERE trxn_id LIKE :pp_pat OR trxn_id LIKE :recur_pat";
    $dbs->push( 'civicrm' );
    $result = db_query( $query, array(
        ':pp_pat' => "PAYPAL {$pp_trxn_id}%",
        ':recur_pat' => "RECURRING PAYPAL {$pp_trxn_id}%",
    ) );
    $dbs->pop();
    if ( !$result->rowCount() ) {
      array_push( $missing_trxns, $pp_trxns[ $pp_trxn_id ] );
      watchdog( 'paypal_audit', 'Missing PayPal: @tx_id, @pp_tx_id, @t, @tt', array( 
        "@tx_id" => $pp_trxns[$pp_trxn_id][ $columns['Transaction ID']],
        "@pp_tx_id" => $pp_trxns[$pp_trxn_id][ $columns['PayPal Transaction ID']],
        "@t" => $pp_trxns[$pp_trxn_id][ $columns['Type']],
        "@tt" => $pp_trxns[$pp_trxn_id][ $columns['Tender Type']] ), WATCHDOG_DEBUG ); 
    } else {
      watchdog( 'paypal_audit', 'Found PayPal: @id', array( "@id" => $pp_trxn_id ), WATCHDOG_DEBUG );
    }
  }

  return $missing_trxns;
}

/**
 * Find PayflowPro tranactions not recorded in civicrm_contribution
 * @TODO refactor and find more optimal way to search trxn ids
 * 	eg fix trxn_id column in db to ONLY store the id, then we can
 * 	do easier, faster searching like IN( )
 * @param array $pf_trxns
 * @return array Missing trxns with full trxn data row objects
 */
function paypal_audit_find_missing_pf_trxns( $pf_trxns, $columns ) {
  $missing_trxns = array();
  
  $dbs = wmf_civicrm_get_dbs();

  // check for matching ids - if it doesnt match, it's missing
  foreach ( array_keys( $pf_trxns ) as $pf_trxn_id ) {
    $query = "SELECT trxn_id FROM civicrm_contribution WHERE trxn_id LIKE :pf_pat";
    $dbs->push( 'civicrm' );
    $result = db_query( $query, array( ':pf_pat' => "PAYFLOWPRO {$pf_trxn_id}%" ) );
    $dbs->pop();
    if ( !$result->rowCount() ) {
      array_push( $missing_trxns, $pf_trxns[ $pf_trxn_id ] );
      watchdog( 'paypal_audit', 'Missing PayflowPro: @tx_id, @pp_tx_id, @t, @tt', array( 
        "@tx_id" => $pf_trxns[$pf_trxn_id][ $columns['Transaction ID']],
        "@pp_tx_id" => $pf_trxns[$pf_trxn_id][ $columns['PayPal Transaction ID']],
        "@t" => $pf_trxns[$pf_trxn_id][ $columns['Type']],
        "@tt" => $pf_trxns[$pf_trxn_id][ $columns['Tender Type']] ), WATCHDOG_DEBUG );  
    } else {
      watchdog( 'paypal_audit', 'Found Payflow: @id', array( '@id' => $pf_trxn_id ), WATCHDOG_DEBUG );
    } 
  }

  return $missing_trxns;
}

/**
 * Format transactions
 * @FIXME handle wonky fields (eg contribution tracking id, optout, etc)
 * @FIXME get rid of the ugly hack
 * @TODO finish the mappings!  NOTE that some transactional information
 * 	will need to be fetched out of the minfraud or other logs...
 * @param unknown_type $trxns
 */
function paypal_audit_format_trxns( $trxns, $report_obj, $gateway='PayflowPro' ) {
  $trxns_formatted = array();

  /**
   *
   */
  $fields = array( 'Billing Country', 'Shipping Country', 'Transaction ID', 'PayPal Transaction ID', 'Currency Symbol', 'Amount', 'Time');
  $columns = $report_obj->getReportResponse()->findColumnNumber( $fields );
  
  foreach ( $trxns as $trxn ) {
    $formatted_trxn = array();
    $formatted_trxn['country'] = ( strlen( $trxn[ $columns[ 'Shipping Country' ]] )) ? $trxn[ $columns[ 'Shipping Country' ]] : $trxn[ $columns[ 'Billing Country']];
    $formatted_trxn['gateway'] = strtolower( $gateway );
    $formatted_trxn['gateway_txn_id'] = ( $gateway == 'PayflowPro' ) ? $trxn[ $columns[ 'Transaction ID' ]] : $trxn[ $columns[ 'PayPal Transaction ID']];
    $formatted_trxn['original_currency'] = $trxn[ $columns[ 'Currency Symbol' ]];
    $formatted_trxn['gross'] = $trxn[ $columns[ 'Amount' ]]/100;
    $formatted_trxn['date'] = strtotime( $trxn[ $columns[ 'Time' ]] );
    
    array_push( $trxns_formatted, $formatted_trxn );
  }
  
  return $trxns_formatted;
}

<?php 
define( 'LOG_AUDIT_LOG_PATH', '/tmp/ipn_logs/*' );

/**
 * Implementation of hook_menu()
 */
function log_audit_menu() {
  $items = array();
  
  $items['admin/settings/contribution_audit/log_audit'] = array(
    'title' => 'Log Audit Configuration',
    'description' => t('Configure log audit settings.'),
    'access arguments' => array('administer contribution_audit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'log_audit_settings' ),
    'type' => MENU_LOCAL_TASK
  );
  
  return $items;
}

/**
 * Callback for menu path "admin/settings/contribution_audit/log_audit".
 */
function log_audit_settings() {
  $form[ 'log_audit_file' ] = array(
    '#type' => 'textfield',
    '#title' => t( 'Path to logs to audit' ),
    '#required' => TRUE,
    '#default_value' => variable_get( 'log_audit_file', LOG_AUDIT_LOG_PATH ),
    '#description' => t( 'The path to the file of log(s) to audit.  Can contain wild cards.' ),
  );
  return system_settings_form( $form );
}

/**
 * Executes query that finds missing transactions and return in an array containing them
 */
function log_audit_get_trxn_info($trxn_query_name, $params) {
  // Establish a connection to the database server
  $dbs = wmf_civicrm_get_dbs();
  $dbs->use_civicrm();
	
  // Read the SQL query
  $query = "SELECT substring(missing_trxn_id, 18, 17) as trxn_id
  			FROM (
  				SELECT civicrm_contribution.trxn_id as missing_trxn_id,
  					civicrm_contribution.contact_id as contribution_contact_id,
  					civicrm_address.contact_id as address_contact_id,
  					civicrm_address.country_id as country_id
  				FROM civicrm_contribution LEFT JOIN civicrm_address ON civicrm_contribution.contact_id = civicrm_address.contact_id
  				WHERE DATE_FORMAT( receive_date, '%%Y%%m%%d%%H%%i%%s' ) >= %d
  					AND DATE_FORMAT( receive_date, '%%Y%%m%%d%%H%%i%%s' ) <= %d
  					AND civicrm_contribution.trxn_id REGEXP 'RECURRING PAYPAL'
  			) AS missing_contribs
  			WHERE country_id IS NULL";
  
  // Format and execute
  $result = db_query( $query, $params[ 'start_time' ], $params[ 'end_time' ] );
  
  // Parse the results
  $trxns = array(); 
  while ( $trxn = db_fetch_object( $result ))  { 
    array_push( $trxns, $trxn->trxn_id );
  }
  
  $dbs->use_default();
  return $trxns;
}

/**
 * Search IPN logs
 * 
 * You can optionall search the logs by looking for mathinc trxn ids in a JSON
 * object, or use the default method of reconstructing contrib arrays from
 * print_r output.
 * 
 * @TODO refactor 
 * @param string $log_filename
 * @param string $pattern
 * @param string $method
 * @return string JSON object of contribution
 */
function log_audit_search_logs($log_filename, $pattern, $method = null )  {
  if ( $method == 'grep_for_json' ) {
    return log_audit_grep_log_for_json( $log_filename, $pattern );
  }
  
  // holds resulting json object of a found transaction
  $contrib_json = null;
  
  // prepare list of files to search through by finding files that contain the trxn id
  $files = array();
  $cmd = "grep -a -l \"%s\" %s";
  $cmd = sprintf($cmd, $pattern, $log_filename);
  exec( $cmd, $files );
  
  // search for contrib in the collection of log files that contain the transaction id
  foreach ( $files as $file ) {
    $fh = fopen( $file, 'r' );                                                                                        
    $contrib_arr = null; // holds string represntation of trxn array                                                                   
    $end_contrib_arr = false; // flag to determine when end of string rep of trxn array is reached                                     
    $contrib_match = false; // flag to determine if the txn id in the array matches a given txn id                                                
    while ( $line = fgets( $fh )) { // read line by line (log files can be quite large, loading into memory != good idea                                                                                                    
      // look for the start of the array if we haven't already started tracking a particular contrib array                       
      if ( !preg_match( "/Attempting to parse: Array/", $line ) && !$contrib_arr ) {                                             
        continue;                                                                                                          
      } else {                                                                                                                   
        $contrib_arr .= $line;                                                                                             
        // if we've hit the end of the array, flag it                                                                      
        if( preg_match( "/^\)/", $line )) {                                                                                
          $end_contrib_arr = true;                                                                                   
        }                                                                                                                  
      }                                                                                                                          

      // look for matching trxn id strings if current line holds a txn_id                                                        
      if ( preg_match( "/\[txn_id\] => $pattern/", $line )) {                                                     
        // we found a match!
        watchdog( 'log_audit', 'Txn_id @txn_id found in @file', array( '@txn_id' => $pattern, '@file' => $file ));                                                                                       
	$contrib_match = true;                                                                                     
      }                                                                                                              
                                                                                                                                           
      if ( $contrib_match && $end_contrib_arr ) {  //we have a contrib match AND a full array str                                
        // turn the contrib array string into an actual array                                                              
        $arr_matches = array(); // reset matching array for preg_match_all 
        $contrib = array(); // reset array to hold array representation of contribution                                    
        preg_match_all( "/\[(.*)\]\s\=>\s(.*[^\s])/", $contrib_arr, $arr_matches );                                        
        foreach ( $arr_matches[1] as $key => $value ) {                                                                    
          $contrib[ $value ] = $arr_matches[ 2 ][ $key ];                                                            
        }                                                                                                                  

        // dbl check that this is a legitimate payment                                                                     
        // payment_status = Completed                                                                                      
        // txn_type = subscr_payment OR web_accept                                                                         
        if ( in_array( $contrib[ 'txn_type' ], array( 'web_accept', 'subscr_payment' ))                                    
            && $contrib[ 'payment_status' ] == 'Completed' ) {                                                 
          // turn array into json                                                                                    
		    $contrib_json = json_encode( $contrib );
		    watchdog( 'log_audit', 'Missing txn json for @txn_id: @txn_json', array( '@txn_id' => $pattern, '@txn_json' => $contrib_json ));
          fclose( $fh );                                                                   
          break 2; // our work here is done.                                                                      
        }                                                                                                                  
        $end_contrib_arr = false;                                                                                          
        $contrib_arr = null;                                                                                               
      } elseif( !$contrib_match && $end_contrib_arr ) { //we have a full array str but no contrib match                          
        // reset array end flag                                                                                            
        $end_contrib_arr = false;                                                                                          
        // reset contrib arr tracker                                                                                       
        $contrib_arr = null;
      }                                                                                                                          
    }                                                                                                                                  
    fclose( $fh );
  }
  return $contrib_json;	
}

/**
 * Greps given log file for a json object containing "txn_id": <txn id>
 * 
 * Uses actual 'grep' tool via exec()
 * 
 * @param string $log_filename
 * @param string $pattern
 * @return string 
 */
function log_audit_grep_log_for_json( $log_filename, $pattern ) {
    // $log_filename = ""
	// $pattern = ""
	$cmd = 'grep -a "\"txn_id\":\"%s\"" %s';
	$cmd = sprintf($cmd, $pattern, $log_filename);  // 6
	
	$exec = exec($cmd);
	$trxn_json = trim( strstr( $exec, "{" ));
	return $trxn_json;
}

/* --
	Produce array containing json data of missing transactions
-- */
function log_audit_trxns_search( $log_filename, $trxns ) {
	
	$trxns_processed_count = 0;
	$not_processed = array();
	$trxn_array = array() ;
	
    foreach ( $trxns as $trxn_id ) {
      $trxn = log_audit_trxn_search( $trxn_id );
      if ( !$trxn ) {
        $not_processed[ $trxn_id ] = $trxn_info;
      }
      $trxn_json_array[ $trxn_id ] = $trxn;
      $trxns_processed_count += 1;
    }
	
	// return array( "trxn_array" => $trxn_array, "not_processed" => $not_processed, "trxns_processed_count" => $trxns_processed_count);
	return $trxn_json_array;
}

/**
 * Search for a single transaction in the logs
 * @param int $trxn_id
 * @return array Formatted trxn info if found, false if not found
 */
function log_audit_trxn_search( $trxn_id ) {
  $result = log_audit_search_logs( variable_get( 'log_audit_file', LOG_AUDIT_LOG_PATH ), $trxn_id );
  if ( !strlen( $result )) {
    return false;
  }
  
  $trxn = log_audit_format_trxn( json_decode( $result, true ));
  return $trxn;
}

function log_audit_check_arr_val( $arr, $key ) {
	if ( isset( $arr[ $key ] ) && strlen( $arr[ $key ] )) {
		return true;
	} else {
		return false;
	}
}

function log_audit_format_trxn( $trxn ) {
  $formatted_trxn = array();
  // handle country
  if ( log_audit_check_arr_val( $trxn, 'country' )) {
    $formatted_trxn[ 'country' ] = $trxn[ 'country' ];
  } elseif( log_audit_check_arr_val( $trxn, 'country_2' )) {
    $formatted_trxn[ 'country' ] = $trxn[ 'country_2' ];
  } elseif( log_audit_check_arr_val( $trxn, 'residence_country' )) {
    $formatted_trxn[ 'country' ] = $trxn[ 'residence_country' ] ;
  }

  // handle gateway
  if ( log_audit_check_arr_val( $trxn, 'gateway' )) {
    $formatted_trxn[ 'gateway' ] = $trxn[ 'gateway' ];
  } else {
    $formatted_trxn[ 'gateway' ] = 'paypal_recurring';
  }
  
  // trxn id
  if( log_audit_Check_arr_val( $formatted_trxn, 'gateway' )) {
    if ( $formatted_trxn[ 'gateway' ] == 'paypal' ) {
      $formatted_trxn['gateway_txn_id'] = $trxn[ 'gateway_txn_id' ];
    } elseif( $formatted_trxn[ 'gateway' ] == 'paypal_recurring' ) {
      $formatted_trxn[ 'gateway_txn_id' ] = $trxn[ 'txn_id' ];
    }
  }
  
  // currency
  if( log_audit_check_arr_val( $trxn, 'mc_currency' )) {
    $formatted_trxn[ 'original_currency' ] = $trxn[ 'mc_currency' ];
  } elseif( log_audit_check_arr_val( $trxn, 'original_currency' )) {
    $formatted_trxn[ 'currency' ] = $trxn[ 'original_currency' ];
  }
  
  // gross
  if ( log_audit_check_arr_val( $trxn, 'gross' )) {
    $formatted_trxn[ 'gross' ] = $trxn[ 'gross' ];
  } elseif ( log_audit_check_arr_val( $trxn, 'mc_gross' )) {
    $formatted_trxn[ 'gross' ] = $trxn[ 'mc_gross' ];
  } elseif( log_audit_check_arr_val( $trxn, 'payment_gross' )) {
    $formatted_trxn[ 'gross' ] = $trxn[ 'payment_gross' ];
  }

  // date
  if ( log_audit_check_arr_val( $trxn, 'date' )) {
    $formatted_trxn[ 'date' ] = $trxn[ 'date' ];
  } elseif ( log_audit_check_arr_val( $trxn, 'payment_date' )) {
    $formatted_trxn[ 'date' ] = strtotime( $trxn[ 'payment_date' ] );
  }
  return $formatted_trxn;
}

/**
 * Invocation of hook_contribution_audit_secondary_trxn_search
 *
 * Performs a secondary serach for missing transactions.
 * @param array $missing_trxn
 */
function log_audit_contribution_audit_secondary_trxn_search( $missing_trxn ) {
  // check if the contribution is still unalloacted..
  if ( !strlen( $missing_trxn[ 'country' ] ) || $missing_trxn[ 'country' ] == 'unknown' ) {
    // try to find the missing contrib from the logs
    if ( $trxn = log_audit_trxn_search( $missing_trxn[ 'gateway_txn_id' ] )) {
      $missing_trxn = $trxn;
    }
  }
  return $missing_trxn;
}

/**
 * Look for already existing contribs that are unallocated and attempt to allocate them
 * @param string $start_date
 * @param string $end_date
 * @return array
 */
function log_audit_contribution_audit_find_missing_trxns( $start_date, $end_date ) {
  $trxn_query_name = 'transaction_contact_audit_unformatted';
  $params = array( 'start_time' => date( 'Ymd', strtotime( $start_date)) . "000000", 'end_time' => date( "Ymd", strtotime( $end_date )) . "235959" );
  $unallocated_trxns = log_audit_get_trxn_info( $trxn_query_name, $params );
  $trxns = array();
  foreach( $unallocated_trxns as $unallocated_trxn_id ) {
    $trxn = log_audit_trxn_search( $unallocated_trxn_id );
    $trxns[ $unallocated_trxn_id ] = $trxn;
  }
  return $trxns;
}

?>

<?php 
define( 'LOG_AUDIT_LOG_PATH', '/tmp/ipn_logs/*' );

/**
 * Implementation of hook_menu()
 */
function log_audit_menu() {
  $items = array();
  
  $items['admin/settings/contribution_audit/log_audit'] = array(
    'title' => 'Log Audit Configuration',
    'description' => t('Configure log audit settings.'),
    'access arguments' => array('administer contribution_audit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'log_audit_settings' ),
    'type' => MENU_LOCAL_TASK
  );
  
  return $items;
}

/**
 * Callback for menu path "admin/settings/contribution_audit/log_audit".
 */
function log_audit_settings() {
  $form[ 'log_audit_file' ] = array(
    '#type' => 'textfield',
    '#title' => t( 'Path to logs to audit' ),
    '#required' => TRUE,
    '#default_value' => variable_get( 'log_audit_file', LOG_AUDIT_LOG_PATH ),
    '#description' => t( 'The path to the file of log(s) to audit.  Can contain wild cards.' ),
  );
  return system_settings_form( $form );
}

/**
 * Executes query that finds missing transactions and return in an array containing them
 */
function log_audit_get_trxn_info($trxn_query_name, $params) {
  // Establish a connection to the database server
  $dbs = _queue2civicrm_get_dbs();
  $dbs->use_civicrm();
	
  // Read the SQL query
  $query = "SELECT substring(missing_trxn_id, 18, 17) as trxn_id
  			FROM (
  				SELECT civicrm_contribution.trxn_id as missing_trxn_id,
  					civicrm_contribution.contact_id as contribution_contact_id,
  					civicrm_address.contact_id as address_contact_id,
  					civicrm_address.country_id as country_id
  				FROM civicrm_contribution LEFT JOIN civicrm_address ON civicrm_contribution.contact_id = civicrm_address.contact_id
  				WHERE DATE_FORMAT( receive_date, '%%Y%%m%%d%%H%%i%%s' ) >= %d
  					AND DATE_FORMAT( receive_date, '%%Y%%m%%d%%H%%i%%s' ) <= %d
  					AND civicrm_contribution.trxn_id REGEXP 'RECURRING PAYPAL'
  			) AS missing_contribs
  			WHERE country_id IS NULL";
  
  // Format and execute
  $result = db_query( $query, $params[ 'start_time' ], $params[ 'end_time' ] );
  
  // Parse the results
  $trxns = array(); 
  while ( $trxn = db_fetch_object( $result ))  { 
    array_push( $trxns, $trxn->trxn_id );
  }
  
  $dbs->use_default();
  return $trxns;
}

/* --
	Grep the ipn logs for encoded json
-- */
function log_audit_search_logs($log_filename, $pattern)  {

	// $log_filename = ""
	// $pattern = ""
	$cmd = 'grep -a "\"txn_id\":\"%s\"" %s';
	$cmd = sprintf($cmd, $pattern, $log_filename);  // 6
	
	$exec = exec($cmd);
	
	return $exec;
}

/* --
	Produce array containing json data of missing transactions
-- */
function log_audit_trxns_search( $log_filename, $trxns ) {
	
	$trxns_processed_count = 0;
	$not_processed = array();
	$trxn_array = array() ;
	
    foreach ( $trxns as $trxn_id ) {
      $trxn = log_audit_trxn_search( $trxn_id );
      if ( !$trxn ) {
        $not_processed[ $trxn_id ] = $trxn_info;
      }
      $trxn_json_array[ $trxn_id ] = $trxn;
      $trxns_processed_count += 1;
    }
	
	// return array( "trxn_array" => $trxn_array, "not_processed" => $not_processed, "trxns_processed_count" => $trxns_processed_count);
	return $trxn_json_array;
}

/**
 * Search for a single transaction in the logs
 * @param int $trxn_id
 * @return array Formatted trxn info if found, false if not found
 */
function log_audit_trxn_search( $trxn_id ) {
  $result = log_audit_search_logs( variable_get( 'log_audit_file', LOG_AUDIT_LOG_PATH ), $trxn_id );
  if ( !strlen( $result )) {
    return false;
  }
  $trxn_json = trim( strstr( $result, "{" ));
  $trxn = log_audit_format_trxn( json_decode( $trxn_json, true ));
  return $trxn;
}

function log_audit_format_trxn( $trxn ) {
  $formatted_trxn = array();
  // handle country
  if ( $trxn[ 'country' ] ) {
    $formatted_trxn[ 'country' ] = $trxn[ 'country' ];
  } elseif( $trxn[ 'country_2' ] ) {
    $formatted_trxn[ 'country' ] = $trxn[ 'country_2' ];
  } elseif( $trxn[ 'residence_country' ] ) {
    $formatted_trxn[ 'country' ] = $trxn[ 'residence_country' ] ;
  }
  
  // handle gateway
  if ( $trxn[ 'gateway' ] ) {
    $formatted_trxn[ 'gateway' ] = $trxn[ 'gateway' ];
  } else {
    $formatted_trxn[ 'gateway' ] = 'paypal_recurring';
  }
  
  // trxn id
  if ( $formatted_trxn[ 'gateway' ] == 'paypal' ) {
    $formatted_trxn['gateway_txn_id'] = $trxn[ 'gateway_txn_id' ];
  } elseif( $formatted_trxn[ 'gateway' ] == 'paypal_recurring' ) {
    $formatted_trxn[ 'gateway_txn_id' ] = $trxn[ 'txn_id' ];
  }
  
  // currency
  if( $trxn[ 'mc_currency' ] ) {
    $formatted_trxn[ 'original_currency' ] = $trxn[ 'mc_currency' ];
  } elseif( $trxn[ 'original_currency' ] ) {
    $formatted_trxn[ 'currency' ] = $trxn[ 'original_currency' ];
  }
  
  // gross
  if ( $trxn[ 'gross' ] ) {
    $formatted_trxn[ 'gross' ] = $trxn[ 'gross' ];
  } elseif ( $trxn[ 'mc_gross' ] ) {
    $formatted_trxn[ 'gross' ] = $trxn[ 'mc_gross' ];
  } elseif( $trxn[ 'payment_gross' ] ) {
    $formatted_trxn[ 'gross' ] = $trxn[ 'payment_gross' ];
  }

  // date
  if ( $trxn[ 'date' ] ) {
    $formatted_trxn[ 'date' ] = $trxn[ 'date' ];
  } elseif ( $trxn[ 'payment_date' ] ) {
    $formatted_trxn[ 'date' ] = strtotime( $trxn[ 'payment_date' ] );
  }
  return $formatted_trxn;
}

/**
 * Invocation of hook_contribution_audit_secondary_trxn_search
 *
 * Performs a secondary serach for missing transactions.
 * @param array $missing_trxn
 */
function log_audit_contribution_audit_secondary_trxn_search( $missing_trxn ) {
  // check if the contribution is still unalloacted..
  if ( !strlen( $missing_trxn[ 'country' ] ) || $missing_trxn[ 'country' ] == 'unknown' ) {
    // try to find the missing contrib from the logs
    if ( $trxn = log_audit_trxn_search( $missing_trxn[ 'gateway_txn_id' ] )) {
      $missing_trxn = $trxn;
    }
  }
  return $missing_trxn;
}

/**
 * Look for already existing contribs that are unallocated and attempt to allocate them
 * @param string $start_date
 * @param string $end_date
 * @return array
 */
function log_audit_contribution_audit_find_missing_trxns( $start_date, $end_date ) {
  $trxn_query_name = 'transaction_contact_audit_unformatted';
  $params = array( 'start_time' => date( 'Ymd', strtotime( $start_date)) . "000000", 'end_time' => date( "Ymd", strtotime( $end_date )) . "235959" );
  $unallocated_trxns = log_audit_get_trxn_info( $trxn_query_name, $params );
  $trxns = array();
  foreach( $unallocated_trxns as $unallocated_trxn_id ) {
    $trxn = log_audit_trxn_search( $unallocated_trxn_id );
    $trxns[ $unallocated_trxn_id ] = $trxn;
  }
  return $trxns;
}

?>

<?php 

/**
 * Invocation of hook_menu
 */
function ganglia_reporter_menu() {
  $items = array();
  
  // displays settings form
  $items[ 'admin/config/ganglia_reporter' ] = array(
    'title' => 'Ganglia Reporter',
    'access arguments' => array( 'administer ganglia reporter' ),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // forces 'Ganglia Reporter' to appear on the config page
  $items[ 'admin/config/ganglia_reporter/configure' ] = array(
    'title' => 'Configure',
    'description' => 'Configure Ganglia Gmetric scripts.',
    'access arguments' => array( 'administer ganglia reporter' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'ganglia_reporter_settings' ),
  );
  
  return $items;
}

/**
 * Invocation of hook_permission
 */
function ganglia_reporter_permission() {
  return array(
    'administer ganglia reporter' => array(
      'title' => t('Administer Ganglia reporter'),
    ),
  );
}

/**
 * Generate settings form
 */
function ganglia_reporter_settings() {
  $form = array();
  
  $form[ 'ganglia_reporter_gmetric_path' ] = array(
    '#type' => 'textfield',
    '#title' => t( 'Gmetric Path' ),
    '#required' => true,
    '#default_value' => variable_get( 'ganglia_reporter_gmetric_path', GangliaReporter::locateGmetricPath() ),
    '#description' => t( 'The full path to Gmetric executable.' )
  );
  
  return system_settings_form( $form );
}

/**
 * Get a GangliaReporter object
 * 
 * Sets a static variable to the GangliaReporter object and returns the object
 * @return object GangliaReporter
 */
function ganglia_reporter_get_obj() {
  static $gr_obj;
  
  if ( !$gr_obj ) {
    try {
      $gr_obj = new GangliaReporter( variable_get( 'ganglia_reporter_gmetric_path', null ));
    } catch ( Exception $e ) {
      drupal_set_message( 'Ganglia reporter encountered a problem: ' . $e, 'error' );
      $gr_obj = false;
    }
  }
  
  return $gr_obj;
}

/**
 * Wrapper for GangliaReporter->send_metric
 * 
 * Params are the same as those for the gmetric binary.  Run gmetric --help 
 * for more details.
 * 
 * @param string $name
 * @param string $value
 * @param string $type
 * @param string $units
 * @param string $slope
 * @param int $tmax
 * @param int $dmax
 * @return bool Success or failure of executing gmetric
 */
function ganglia_reporter_send_metric( $name, $value, $type = 'int8', $units = '', $slope = 'both', $tmax = 60, $dmax = 0 ) {
  $gr = ganglia_reporter_get_obj();
  return $gr->sendMetric( $name, $value, $type, $units, $slope, $tmax, $dmax );
}


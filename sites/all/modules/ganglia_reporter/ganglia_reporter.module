<?php 

function ganglia_reporter_menu() {
  $items = array();
  
  $items[ 'admin/settings/ganglia_reporter' ] = array(
    'title' => 'Ganglia Reporter',
    'description' => t( 'Configure Ganglia Reporter.' ),
    'access arguments' => array( 'administer ganglia reporter' ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'ganglia_reporter_settings' ),
  );

  $items[ 'admin/settings/ganglia_reporter/configure' ] = array(
    'title' => 'Configure',
    'access arguments' => array( 'asminister ganglia reporter' ),
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  return $items;
}

function ganglia_reporter_perm() {
  return array( 'administer ganglia reporter' );
}

function ganglia_reporter_settings() {
  $form = array();
  
  $form[ 'ganglia_reporter_gmetric_path' ] = array(
    '#type' => 'textfield',
    '#title' => t( 'Gmetric Path' ),
    '#required' => true,
    '#default_value' => variable_get( 'ganglia_reporter_gmetric_path', GangliaReporter::locateGmetricPath() ),
    '#description' => t( 'The full path to Gmetric executable.' )
  );
  
  return system_settings_form( $form );
}

function ganglia_reporter_obj() {
  static $gr_obj;
  
  if ( !$gr_obj ) {
    try {
      $gr_obj = new GangliaReporter();
    } catch ( Exception $e ) {
      drupal_set_error( 'Ganglia reporter does not appear to be configured correctly.' );
      $gr_obj = false;
    }
  }
  
  return $gr_obj;
}

function ganglia_reporter_send_metric( $name, $value, $type = 'int8', $units = '', $slope = 'both', $tmax = 60, $dmax = 0 ) {
  $gr = ganglia_reporter_obj();
  $ret = $gr->sendMetric( $name, $value, $type, $units, $slope, $tmax, $dmax );
  if ( $ret === 0 ) {
    return true;
  } else {
    return false;
  }
}

class GangliaReporter { 
  
  protected $gmetric_path;

  function __construct() {
    if ( !$gmetric_path = variable_get( 'ganglia_reporter_gmetric_path', false )){
      watchdog( 'ganglia_reporter', 'Gmetric path not configured, attempting to auto-locate...' );
      $gmetric_path = self::locateGmetricPath(); 
    }
    $this->setGmetricPath( $gmetric_path );
  }
  
  function getGmetricPath() {
    if ( !$this->gmetric_path ) {
      $this->setGmetricPath( self::locateGmetricPath() );
    }
    return $this->gmetric_path;
  }
  
  function setGmetricPath( $path ) {
    if ( !file_exists( $path )) {
      throw new Exception( 'Gmetric path does not exist.' );
    }
    $this->gmetric_path = $path;
  }
  
  function sendMetric( $name, $value, $type = 'int8', $units = '', $slope = 'both', $tmax = 60, $dmax = 0 ) {
    $args = array();
    $opts = array(
      'name',
      'value',
      'type',
      'units',
      'slope',
      'tmax',
      'dmax'
    );
    foreach( $opts as $opt ) {
      $args[] = "--" . $opt . "=" . escapeshellarg( ${$opt} );
    }
    $cmd = escapeshellcmd( $this->getGmetricPath() . ' ' . implode( " ", $args ));
    exec( $cmd, $output, $retval );
    return $retval;
  }
  
  static function locateGmetricPath() {
    $path = exec( 'which gmetric' );
    if ( !strlen( $path )) {
      return false;
    }
    return $path;
  }
}